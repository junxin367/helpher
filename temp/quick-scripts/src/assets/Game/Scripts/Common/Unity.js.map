{"version":3,"sources":["assets\\Game\\Scripts\\Common\\Unity.ts"],"names":[],"mappings":";;;;;;AAAA,gDAA+C;AAE/C;IAAA;IAqCA,CAAC;IApCU,aAAO,GAAd,UAAe,GAAW;QACtB,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAA;IACvD,CAAC;IAMc,cAAQ,GAAvB,UAAwB,QAAqC,EAAE,IAAkB;QAC7E,IAAI,QAAQ,GAAG,QAAQ,CAAC,QAAQ,EAA8B,CAAC;QAE/D,IAAI,IAAI,CAAC,GAAG,EAAE;YACV,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;YAC/B,IAAI,YAAY,GAAG,KAAK,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,EAAZ,CAAY,CAAC,CAAA;YAC/C,YAAY,CAAC,OAAO,CAAC,UAAA,CAAC;gBAClB,IAAI,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACpB,IAAI,YAAY,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAClC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,YAAY,GAAG,YAAY,CAAC;YAC3D,CAAC,CAAC,CAAA;SACL;IACL,CAAC;IAEM,eAAS,GAAhB,UAAiB,QAAqC,EAAE,IAAY;QAChE,KAAK,IAAI,CAAC,IAAI,uBAAU,CAAC,KAAK,EAAE;YAC5B,IAAI,CAAC,GAAG,uBAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC5B,aAAa;YACb,IAAI,CAAC,IAAI,CAAC,EAAE;gBACR,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;gBACzB,IAAI,GAAG,CAAC,IAAI,IAAI,IAAI,EAAE;oBAClB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;iBAChC;aACJ;SACJ;IACL,CAAC;IA7BM,gBAAU,GAAG,WAAW,CAAA;IACxB,gBAAU,GAAG,YAAY,CAAA;IA+BpC,YAAC;CArCD,AAqCC,IAAA;kBArCoB,KAAK","file":"","sourceRoot":"/","sourcesContent":["import { PlayerInfo } from \"./Base/PlayerInfo\";\n\nexport default class Unity {\n    static iconSOV(soa: number): any {\n        return soa == 0 ? this.Icon_Share : this.Icon_Video\n    }\n\n    static Icon_Share = \"Img/share\"\n    static Icon_Video = \"Img/shipin\"\n\n\n    private static loadSkin(skeleton: dragonBones.ArmatureDisplay, skin: csv.Skin_Row) {\n        let armature = skeleton.armature() as dragonBones.ArmatureData;\n\n        if (skin.res) {\n            let slots = skin.res.split(\"/\")\n            let slot_2_index = slots.map(v => v.split(':'))\n            slot_2_index.forEach(v => {\n                let slotname = v[0];\n                let displayIndex = parseInt(v[1]);\n                armature.getSlot(slotname).displayIndex = displayIndex;\n            })\n        }\n    }\n\n    static loadSkins(skeleton: dragonBones.ArmatureDisplay, type: number) {\n        for (let k in PlayerInfo.skins) {\n            let s = PlayerInfo.skins[k];\n            //2 : 表示 当前选择\n            if (s == 2) {\n                let cfg = csv.Skin.get(k)\n                if (cfg.type == type) {\n                    this.loadSkin(skeleton, cfg);\n                }\n            }\n        }\n    }\n\n\n}"]}