{"version":3,"sources":["assets\\framework\\core\\calc.js"],"names":["chars","type","value","asso","prec","number","n","isNaN","isFinite","tokenize","str","replace","out","temp","i","length","isDigit","charAt","push","isOperator","isPars","test","_string","_array","s","c","token","output","stack","x","last","pop","concat","reverse","t","a","parseFloat","Math","pow","calc","y","z","toString","window"],"mappings":"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","sourceRoot":"/","sourcesContent":["var chars = {\r\n    \"+\": {\r\n      type: \"Operator\",\r\n      value: \"+\",\r\n      asso: \"left\",\r\n      prec: 2\r\n    },\r\n    \"-\": {\r\n      type: \"Operator\",\r\n      value: \"-\",\r\n      asso: \"left\",\r\n      prec: 2\r\n    },\r\n    \"*\": {\r\n      type: \"Operator\",\r\n      value: \"*\",\r\n      asso: \"left\",\r\n      prec: 3\r\n    },\r\n    \"/\": {\r\n      type: \"Operator\",\r\n      value: \"/\",\r\n      asso: \"left\",\r\n      prec: 3\r\n    },\r\n    \"^\": {\r\n      type: \"Operator\",\r\n      value: \"^\",\r\n      asso: \"right\",\r\n      prec: 4\r\n    },\r\n    \"number\": function (n) {\r\n      if (!isNaN(n) && isFinite(n)) {\r\n        return {\r\n          type: \"Literal\",\r\n          value: n + ''\r\n        }\r\n      }\r\n    },\r\n    \"(\": {\r\n      type: \"Left Parenthesis\",\r\n      value: \"(\"\r\n    },\r\n    \")\": {\r\n      type: \"Right Parenthesis\",\r\n      value: \")\"\r\n    }\r\n  };\r\n  \r\n  function tokenize(str) {\r\n    str = str.replace(/(\\t|\\s)/g, \"\");\r\n    var out = [];\r\n    var temp = \"\";\r\n    for (var i = 0; i < str.length; i++) {\r\n      if (isDigit(str.charAt(i))) {\r\n        temp += str.charAt(i);\r\n        if (!isDigit(str.charAt(i + 1))) {\r\n          out.push(chars[\"number\"](temp));\r\n          temp = \"\";\r\n        }\r\n      } else if (isOperator(str.charAt(i))) {\r\n        if (str.charAt(i) == \"-\" && (str.charAt(i - 1) == \"\" || isOperator(str.charAt(i - 1)) || str.charAt(i - 1) == \"(\") && isDigit(str.charAt(i + 1))) {\r\n          temp += \"-\";\r\n        } else {\r\n          out.push(chars[str.charAt(i)]);\r\n        }\r\n      } else if (isPars(str.charAt(i))) {\r\n        if (str.charAt(i) == \"(\") {\r\n          if (isDigit(str.charAt(i - 1)) || str.charAt(i - 1) == \")\") {\r\n            out.push(chars[\"*\"]);\r\n          }\r\n          out.push(chars[\"(\"]);\r\n        } else {\r\n          out.push(chars[\")\"]);\r\n        }\r\n      }\r\n    }\r\n  \r\n    function test(_string, _array) {\r\n      for (var i = 0; i < _array.length; i++) {\r\n        if (_string === _array[i]) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n  \r\n    function isDigit(_string) {\r\n      return test(_string, [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \".\"]);\r\n    }\r\n  \r\n    function isOperator(_string) {\r\n      return test(_string, [\"+\", \"-\", \"*\", \"/\", \"^\"]);\r\n    }\r\n  \r\n    function isPars(s) {\r\n      return test(s, [\"(\", \")\"])\r\n    }\r\n    return out\r\n  }\r\n  \r\n  function c(token) {\r\n    var output = [];\r\n    var stack = []\r\n    for (var i = 0; i < token.length; i++) {\r\n      var x = token[i];\r\n      var last = stack.length ? stack[stack.length - 1] : false;\r\n  \r\n      if (x.type == \"Literal\") {\r\n        output.push(x);\r\n      } else if (x.type == \"Operator\") {\r\n        while (last && last.value != \"(\" && (x.prec < last.prec || x.asso == \"left\" && x.prec == last.prec)) {\r\n          output.push(stack.pop());\r\n          last = stack.length ? stack[stack.length] : false;\r\n        }\r\n        stack.push(x);\r\n      } else if (x.type == \"Left Parenthesis\") {\r\n        stack.push(x)\r\n      } else if (x.type == \"Right Parenthesis\") {\r\n        while (last && last.value != \"(\") {\r\n          output.push(stack.pop());\r\n          last = stack.length ? stack[stack.length - 1] : false;\r\n        }\r\n        stack.pop();\r\n      }\r\n    }\r\n    return output.concat(stack.reverse())\r\n  }\r\n  \r\n  function t(a) {\r\n    var x = [];\r\n    for (var i = 0; i < a.length; i++) {\r\n      if (a[i].type == \"Literal\") {\r\n        x.push(parseFloat(a[i].value));\r\n      } else if (a[i].type == \"Operator\") {\r\n        switch (a[i].value) {\r\n        case \"+\":\r\n          {\r\n            x[x.length - 2] = parseFloat(((x[x.length - 2]*10000) + (x[x.length - 1]*10000)) / 10000);\r\n            x.pop();\r\n            break;\r\n          }\r\n        case \"-\":\r\n          {\r\n            x[x.length - 2] = parseFloat(((x[x.length - 2]*10000) - (x[x.length - 1]*10000)) / 10000);\r\n            x.pop();\r\n            break;\r\n          }\r\n        case \"*\":\r\n          {\r\n            x[x.length - 2] = parseFloat(x[x.length - 2] * x[x.length - 1]);\r\n            x.pop();\r\n            break;\r\n          }\r\n        case \"/\":\r\n          {\r\n            x[x.length - 2] = parseFloat(x[x.length - 2] / x[x.length - 1]);\r\n            x.pop();\r\n            break;\r\n          }\r\n        case \"^\":\r\n          {\r\n            x[x.length - 2] = parseFloat(Math.pow(x[x.length - 2], x[x.length - 1]));\r\n            x.pop();\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return x.length ? x[0] : 0;\r\n  }\r\n  \r\n  function calc(n) {\r\n    var x = tokenize(n);\r\n    var y = c(x);\r\n    var z = t(y);\r\n    return z.toString();\r\n  }\r\n\r\n  window.calc = calc;\r\n  "]}