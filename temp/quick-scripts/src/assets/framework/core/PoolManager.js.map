{"version":3,"sources":["assets\\framework\\core\\PoolManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import Signal from \"./Signal\";\r\n\r\nexport default class PoolManager {\r\n    nodePool: any = {}\r\n\r\n    nodes = {}\r\n\r\n    onCreateObject: Function;\r\n    target: any;\r\n    root: any;\r\n\r\n    managed: boolean = false;\r\n    aliveObjects: cc.Node[] = []\r\n\r\n    onRecycleSignal = new Signal();\r\n\r\n    private static _instances: { [index: string]: PoolManager } = {}\r\n\r\n    private static _idInc: number = 0;\r\n    private _id: string = '0';\r\n\r\n    _autoRecycle = false;\r\n\r\n    constructor(root?: cc.Node | cc.Scene, onCreateObject?, target?) {\r\n        this.onCreateObject = onCreateObject;\r\n        this.target = target;\r\n        this.root = root;\r\n        this._id = PoolManager._idInc++ + \"\";\r\n        PoolManager._instances[this._id] = this;\r\n        // this.autoRecycle = this._autoRecycle;\r\n    }\r\n\r\n    set autoRecycle(v) {\r\n        if (v) {\r\n            this.root && this.root.on(cc.Node.EventType.CHILD_REMOVED, this.onNodeRemove, this)\r\n        } else {\r\n            this.root && this.root.off(cc.Node.EventType.CHILD_REMOVED, this.onNodeRemove, this)\r\n        }\r\n        this._autoRecycle = v\r\n    }\r\n\r\n    set name(v) {\r\n        delete PoolManager._instances[this._id]\r\n        this._id = v;\r\n        PoolManager._instances[this._id] = this;\r\n    }\r\n\r\n    public static get(name) {\r\n        return PoolManager._instances[name]\r\n    }\r\n\r\n    destroy() {\r\n        this.clear();\r\n        delete PoolManager._instances[this._id];\r\n    }\r\n\r\n    onNodeRemove(node: cc.Node) {\r\n        this.put(node);\r\n        this.onRecycleSignal.fire(node);\r\n    }\r\n\r\n    objects() {\r\n        return this.aliveObjects;\r\n    }\r\n\r\n    clearAlives() {\r\n        for (var i = 0; i < this.aliveObjects.length;) {\r\n            let obj = this.aliveObjects[i]\r\n            obj.destroy()\r\n            obj.destroyAllChildren();\r\n            delete this.aliveObjects[i];\r\n        }\r\n    }\r\n\r\n    getPool(type): cc.NodePool {\r\n        if (typeof (type) == \"object\") {\r\n            type = type._uuid || type.name;\r\n        }\r\n        let pool = this.nodePool[type];\r\n        if (pool == null) {\r\n            pool = new cc.NodePool();\r\n            this.nodePool[type] = pool;\r\n        }\r\n        return pool;\r\n    }\r\n\r\n    getAsync(type, url): Promise<cc.Node> {\r\n        return new Promise((resolve, reject) => {\r\n            let node = this.getPool(type).get();\r\n            if (this.onCreateObject) {\r\n                if (node == null) {\r\n                    cc.resources.load(url, cc.Prefab, (err, res) => {\r\n                        if (err) return reject(err)\r\n                        node = cc.instantiate(res);\r\n                        if (this.root)\r\n                            node.setParent(this.root);\r\n                        if (this.managed)\r\n                            this.aliveObjects.push(node);\r\n                        this.nodes[node.uuid] = type;\r\n                        resolve(node);\r\n                    })\r\n                }\r\n            }\r\n            if (this.root) {\r\n                node.active = true;\r\n                node.setParent(this.root);\r\n            }\r\n            if (this.managed)\r\n                this.aliveObjects.push(node);\r\n            resolve(node);\r\n        })\r\n    }\r\n\r\n    get(type): cc.Node {\r\n        let node = this.getPool(type).get();\r\n        if (this.onCreateObject) {\r\n            if (node == null) {\r\n                node = this.onCreateObject.call(this.target, type)\r\n                if (this.root)\r\n                    node.parent = this.root\r\n                if (!node)\r\n                    console.warn(node, \"onCreateObject must return an object\")\r\n                if (this.managed)\r\n                    this.aliveObjects.push(node);\r\n                this.nodes[node.uuid] = type;\r\n                return node;\r\n            }\r\n        }\r\n        if (this.root) {\r\n            node.active = true;\r\n            node.parent = this.root;\r\n        }\r\n        if (this.managed)\r\n            this.aliveObjects.push(node);\r\n        return node;\r\n    }\r\n\r\n    tag(node, type) {\r\n        this.nodes[node.uuid] = type;\r\n    }\r\n\r\n    put(node: cc.Node, type = null) {\r\n        if (type == null)\r\n            type = this.nodes[node.uuid];\r\n        this.getPool(type).put(node);\r\n        if (this.managed)\r\n            this.aliveObjects.splice(this.aliveObjects.indexOf(node), 1);\r\n    }\r\n\r\n    clear(type?) {\r\n        if (this.managed) {\r\n            this.clearAlives();\r\n        }\r\n        if (type)\r\n            this.getPool(type).clear();\r\n        else {\r\n            // this.root.off(SystemEventType.CHILD_REMOVED, this.onNodeRemove, this)\r\n            for (var t in this.nodePool) {\r\n                let pool = this.nodePool[t] as cc.NodePool\r\n                pool.clear();\r\n                delete this.nodePool[t]\r\n            }\r\n            for (var k in this.nodes) {\r\n                delete this.nodes[k];\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    size(type) {\r\n        return this.getPool(type).size();\r\n    }\r\n}\r\n\r\nwindow['PoolManager'] = PoolManager;"]}