{"version":3,"sources":["assets\\framework\\extension\\render\\mesh-sprite.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// author: lamyoung.com\n// modified : rw(mimgame.com) 2020/4/6\n\nconst gfx = cc.gfx;\n\nlet { executeInEditMode, ccclass, property } = cc._decorator\n@ccclass\n@executeInEditMode\nexport default class MeshSprite extends cc.Component {\n\n    @property({ displayName: \"刷新\" })\n    _temp_refresh: boolean = true;\n    @property({ displayName: \"刷新\" })\n    get temp_refresh() {\n        return this._temp_refresh;\n    }\n    set temp_refresh(v) {\n        this._temp_refresh = v;\n        this._applyVertexes();\n    }\n\n    @property(cc.Vec2)\n    _offset: cc.Vec2 = cc.v2();\n    /**\n     * !#en Position offset\n     * !#zh 位置偏移量\n     * @property offset\n     * @type {Vec2}\n     */\n    @property({ type: cc.Vec2 })\n    get offset() {\n        return this._offset;\n    }\n\n    set offset(value) {\n        this._offset = value;\n        if (this.temp_refresh || !CC_EDITOR)\n            this._applyVertexes();\n    }\n    @property(cc.SpriteFrame)\n    _spriteFrame: cc.SpriteFrame = null;\n    /**\n     * !#en The sprite frame of the sprite.\n     * !#zh 精灵的精灵帧\n     * @property spriteFrame\n     * @type {SpriteFrame}\n     * @example\n     * sprite.spriteFrame = newSpriteFrame;\n     */\n    @property({ type: cc.SpriteFrame })\n    get spriteFrame() {\n        return this._spriteFrame;\n    }\n\n    set spriteFrame(v) {\n        this._spriteFrame = v;\n        this._applySpriteFrame();\n    }\n    @property([cc.Vec2])\n    _vertexes: cc.Vec2[] = [\n        cc.v2(-100, -100),\n        cc.v2(100, -100),\n        cc.v2(100, 100),\n        cc.v2(-100, 100)\n    ]\n    /**\n     * !#en Polygon points\n     * !#zh 多边形顶点数组\n     * @property points\n     * @type {Vec2[]}\n     */\n    @property({ type: [cc.Vec2] })\n    get vertexes() {\n        return this._vertexes;\n    }\n    set vertexes(value) {\n        this._vertexes = value;\n        this._updateMesh();\n        if (this.temp_refresh || !CC_EDITOR) {\n            this._applyVertexes();\n        }\n    }\n\n    @property\n    customShader: boolean = false;\n\n    @property\n    deleteMode: boolean = false;\n\n    renderer: cc.MeshRenderer;\n\n    _meshCache: any;\n\n    mesh: cc.Mesh;\n\n    texture: cc.Texture2D;\n\n    @property(cc.Color)\n    _color: cc.Color = cc.color(255, 255, 255, 255);\n\n    set diffuseColor(v) {\n        if (v == null) return;\n        const renderer = this.renderer;\n        if (!cc.isValid(renderer)) return\n        let material = renderer.getMaterial(0);\n        if (!cc.isValid(material)) return;\n        material.setProperty(\"diffuseColor\", v)\n        this._color = v;\n    }\n\n    onLoad() {\n        this._meshCache = {};\n        this._updateMesh();\n\n        let renderer = this.node.getComponent(cc.MeshRenderer);\n        if (!renderer) {\n            renderer = this.node.addComponent(cc.MeshRenderer);\n        }\n\n        renderer.mesh = null;\n        this.renderer = renderer;\n\n        if (!this.customShader) {\n            let builtinMaterial = new cc.Material();\n            builtinMaterial.copy(cc.Material.getInstantiatedBuiltinMaterial(\"unlit\", this));   //getBuiltinMaterial\n            renderer.setMaterial(0, builtinMaterial);\n        }\n        // renderer.getMaterial(0).setProperty(\"mainOffset\", cc.v2(0.1, 0.2))\n        this._applySpriteFrame();\n        this._applyVertexes();\n    }\n\n    onDestroy() {\n        this.mesh.destroy();\n    }\n\n    _updateMesh() {\n        let mesh = this._meshCache[this.vertexes.length];\n        if (!mesh) {\n            mesh = new cc.Mesh();\n            mesh.init(new gfx.VertexFormat([\n                { name: gfx.ATTR_POSITION, type: gfx.ATTR_TYPE_FLOAT32, num: 2 },\n                { name: gfx.ATTR_UV0, type: gfx.ATTR_TYPE_FLOAT32, num: 2 },\n            ]), this.vertexes.length, true);\n            this._meshCache[this.vertexes.length] = mesh;\n        }\n        this.mesh = mesh;\n        // cc.log('_updateMesh');\n    }\n\n    // 更新顶点\n    _applyVertexes() {\n        // cc.log('_applyVertexes');\n\n        // 设置坐标\n        const mesh = this.mesh;\n        mesh.setVertices(gfx.ATTR_POSITION, this.vertexes);\n\n        if (this.texture) {\n            let uvs = [];\n            // 计算uv\n            for (const pt of this.vertexes) {\n                const vx = (pt.x + this.texture.width / 2 + this.offset.x) / this.texture.width;\n                const vy = 1.0 - (pt.y + this.texture.height / 2 + this.offset.y) / this.texture.height\n                uvs.push(cc.v2(vx, vy));\n            }\n            mesh.setVertices(gfx.ATTR_UV0, uvs);\n        }\n\n        if (this.vertexes.length >= 3) {\n            // 计算顶点索引 \n            let ids = [];\n            const vertexes = [].concat(this.vertexes);\n\n            // 多边形切割，未实现相交的复杂多边形，确保顶点按顺序且围成的线不相交\n            let index = 0, rootIndex = -1;\n            while (vertexes.length > 3) {\n                const p1 = vertexes[index];\n                const p2 = vertexes[(index + 1) % vertexes.length];\n                const p3 = vertexes[(index + 2) % vertexes.length];\n\n                const v1 = p2.sub(p1);\n                const v2 = p3.sub(p2);\n                if (v1.cross(v2) >= 0) {\n                    // 是凸点\n                    let isIn = false;\n                    for (const p_t of vertexes) {\n                        if (p_t !== p1 && p_t !== p2 && p_t !== p3 && this._testInTriangle(p_t, p1, p2, p3)) {\n                            // 其他点在三角形内\n                            isIn = true;\n                            break;\n                        }\n                    }\n                    if (!isIn) {\n                        // 切耳朵，是凸点，且没有其他点在三角形内\n                        ids = ids.concat([this.vertexes.indexOf(p1), this.vertexes.indexOf(p2), this.vertexes.indexOf(p3)]);\n                        vertexes.splice(vertexes.indexOf(p2), 1);\n                        rootIndex = index;\n                    } else {\n                        index = (index + 1) % vertexes.length;\n                        if (index === rootIndex) {\n                            cc.log('循环一圈未发现');\n                            break;\n                        }\n                    }\n                } else {\n                    index = (index + 1) % vertexes.length;\n                    if (index === rootIndex) {\n                        cc.log('循环一圈未发现');\n                        break;\n                    }\n                }\n            }\n            ids = ids.concat(vertexes.map(v => { return this.vertexes.indexOf(v) }));\n            mesh.setIndices(ids);\n\n            if (this.renderer.mesh != mesh) {\n                // mesh 完成后再赋值给 MeshRenderer , 否则模拟器(mac)会跳出\n                this.renderer.mesh = mesh;\n            }\n        } else {\n\n        }\n    }\n\n    // 判断一个点是否在三角形内\n    _testInTriangle(point, triA, triB, triC) {\n        let AB = triB.sub(triA), AC = triC.sub(triA), BC = triC.sub(triB), AD = point.sub(triA), BD = point.sub(triB);\n        return (AB.cross(AC) >= 0 ^ AB.cross(AD) < 0)  // D,C 在AB同同方向\n            && (AB.cross(AC) >= 0 ^ AC.cross(AD) >= 0) // D,B 在AC同同方向\n            && (BC.cross(AB) > 0 ^ BC.cross(BD) >= 0); // D,A 在BC同同方向\n    }\n\n    // 更新图片\n    _applySpriteFrame() {\n        // cc.log('_applySpriteFrame');\n        if (this.spriteFrame) {\n            const renderer = this.renderer;\n            let material = renderer.getMaterial(0);\n            // Reset material\n            let texture = this.spriteFrame.getTexture();\n            material.define(\"USE_DIFFUSE_TEXTURE\", true);\n            material.setProperty('diffuseTexture', texture);\n            this.texture = texture;\n            material.setProperty(\"diffuseColor\", this.node.color)\n        }\n    }\n\n\n\n    // update() {\n    //     if (CC_EDITOR) {\n    //         if (this.temp_refresh) {\n    //             // this._applyVertexes();\n    //         }\n    //     }\n    // }\n\n}"]}