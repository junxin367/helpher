{"version":3,"sources":["assets\\framework\\extension\\movement\\SMoveBase.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAM,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAE5C;IAAsC,4BAAY;IAAlD;QAAA,qEAyHC;QAvHG,gBAAU,GAAY,IAAI,CAAC;QAE3B,cAAQ,GAAY,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;QAElC,SAAG,GAAY,IAAI,CAAA;QAInB,sBAAgB,GAAY,KAAK,CAAC;QAGlC,oBAAc,GAAW,CAAC,CAAC;QAG3B,6BAA6B;QAC7B,wBAAwB;QACxB,6BAA6B;QAC7B,4BAA4B;QAE5B,aAAO,GAAY,KAAK,CAAC;QAEzB,YAAM,GAAY,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC;;IAkGnC,CAAC;IAhGG,kCAAe,GAAf,UAAgB,CAAC;IAEjB,CAAC;IAGD,sBAAI,4BAAM;aAaV;YACI,OAAO,IAAI,CAAC,GAAG,CAAC;QACpB,CAAC;aAfD,UAAW,CAAoB;YAC3B,IAAI,CAAC,YAAY,EAAE,CAAC,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC,IAAI,EAAE;gBAC9C,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;aACnB;iBAAM;gBACH,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;aAChB;YACD,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;QAC3B,CAAC;;;OAAA;IAED,sBAAI,oCAAc;aAAlB;YACI,OAAO,IAAI,CAAC,MAAM,CAAC;QACvB,CAAC;;;OAAA;IAMD,wBAAK,GAAL;IACA,CAAC;IAED,wBAAK,GAAL,UAAM,EAAG;IAET,CAAC;IAED,iCAAc,GAAd,UAAe,QAAQ,EAAE,MAAM,EAAE,QAAa;QAAb,yBAAA,EAAA,YAAY,CAAC;IAE9C,CAAC;IAED,4BAAS,GAAT;QACI,uBAAuB;IAC3B,CAAC;IAED,gDAAgD;IAChD,6BAA6B;IAC7B,uCAAuC;IACvC,yCAAyC;IACzC,qCAAqC;IACrC,IAAI;IAEJ,iCAAiC;IACjC,mCAAmC;IACnC,IAAI;IAEJ,yBAAM,GAAN,UAAO,EAAE;QACL,8BAA8B;QAC9B,4DAA4D;QAC5D,sCAAsC;QACtC,sDAAsD;QACtD,yDAAyD;QACzD,oCAAoC;QACpC,YAAY;QACZ,QAAQ;QACR,IAAI;IACR,CAAC;IAED,+BAAY,GAAZ,UAAa,SAAkB,EAAE,QAAQ;QACrC,mDAAmD;QACnD,IAAI,CAAC,GAAG,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAC1C,IAAI,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACzB,IAAI,CAAC,CAAC,MAAM,EAAE,GAAG,QAAQ,EAAE;YACvB,OAAO,IAAI,CAAC;SACf;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,2BAAQ,GAAR,UAAS,QAAY;QAAZ,yBAAA,EAAA,YAAY;QACjB,OAAO,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC7D,CAAC;IAED,uBAAI,GAAJ,UAAK,EAAE;QACH,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,OAAO,EAAE;YACjC,OAAO;SACV;QACD,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;IACnB,CAAC;IAED,wBAAK,GAAL;QACI,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;IACxB,CAAC;IAED,yBAAM,GAAN;QACI,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;IACzB,CAAC;IAGD,6BAAU,GAAV;QACI,IAAI,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YAClC,IAAI,CAAC,KAAK,EAAE,CAAA;SACf;IACL,CAAC;IArHD;QADC,QAAQ;gDACkB;IAE3B;QADC,QAAQ;8CACyB;IAElC;QADC,QAAQ,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE,WAAW,EAAE,QAAQ,EAAE,CAAC;yCAChC;IAInB;QADC,QAAQ;sDACyB;IAGlC;QADC,QAAQ;oDACkB;IAbV,QAAQ;QAD5B,OAAO;OACa,QAAQ,CAyH5B;IAAD,eAAC;CAzHD,AAyHC,CAzHqC,EAAE,CAAC,SAAS,GAyHjD;kBAzHoB,QAAQ","file":"","sourceRoot":"/","sourcesContent":["const { ccclass, property } = cc._decorator;\r\n@ccclass\r\nexport default class MoveBase extends cc.Component {\r\n    @property\r\n    moveOnLoad: boolean = true;\r\n    @property\r\n    velocity: cc.Vec2 = cc.Vec2.RIGHT;\r\n    @property({ type: cc.Node, displayName: \"target\" })\r\n    tar: cc.Node = null\r\n\r\n\r\n    @property\r\n    rotateByVelocity: boolean = false;\r\n\r\n    @property\r\n    rotationOffset: number = 0;\r\n\r\n\r\n    // _updateCallback: Function;\r\n    // _callbackTarget: any;\r\n    // _cmdUpdateDur: number = 0;\r\n    // _updateTimer: number = 0;\r\n\r\n    _paused: boolean = false;\r\n\r\n    tarPos: cc.Vec2 = cc.Vec2.ZERO;\r\n\r\n    onTargetChanged(t) {\r\n\r\n    }\r\n\r\n\r\n    set target(k: cc.Vec2 | cc.Node) {\r\n        if (k instanceof cc.Vec3 || k instanceof cc.Vec2) {\r\n            this.tarPos = k;\r\n        } else {\r\n            this.tar = k;\r\n        }\r\n        this.onTargetChanged(k)\r\n    }\r\n\r\n    get targetPosition() {\r\n        return this.tarPos;\r\n    }\r\n\r\n    get target() {\r\n        return this.tar;\r\n    }\r\n\r\n    reset() {\r\n    }\r\n\r\n    _step(dt?) {\r\n\r\n    }\r\n\r\n    onBeforeUpdate(callback, target, duration = -1) {\r\n\r\n    }\r\n\r\n    onDisable() {\r\n        // this.removeCommand()\r\n    }\r\n\r\n    // addCommand(callback, target, duration = -1) {\r\n    //     this._updateTimer = 0;\r\n    //     this._updateCallback = callback,\r\n    //         this._callbackTarget = target;\r\n    //     this._cmdUpdateDur = duration;\r\n    // }\r\n\r\n    // removeCommand(callback?, t?) {\r\n    //     this._updateCallback = null;\r\n    // }\r\n\r\n    update(dt) {\r\n        // if (this._updateCallback) {\r\n        //     this._updateCallback.call(this._callbackTarget, this)\r\n        //     if (this._cmdUpdateDur != -1) {\r\n        //         this._updateTimer = this._updateTimer + dt;\r\n        //         if (this._updateTimer >= this._cmdUpdateDur) {\r\n        //             this.removeCommand();\r\n        //         }\r\n        //     }\r\n        // }\r\n    }\r\n\r\n    isInDistance(targetpos: cc.Vec2, radiusSq) {\r\n        // let c = this.node.getBoundingBoxToWorld().center\r\n        let c = ccUtil.getWorldPosition(this.node)\r\n        let v = targetpos.sub(c);\r\n        if (v.magSqr() < radiusSq) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isStatic(variance = 1) {\r\n        return this.velocity.fuzzyEquals(cc.Vec2.ZERO, variance);\r\n    }\r\n\r\n    step(dt) {\r\n        if (this.moveOnLoad || this._paused) {\r\n            return;\r\n        }\r\n        this._step(dt);\r\n    }\r\n\r\n    pause() {\r\n        this._paused = true;\r\n    }\r\n\r\n    resume() {\r\n        this._paused = false;\r\n    }\r\n\r\n\r\n    lateUpdate() {\r\n        if (this.moveOnLoad && !this._paused) {\r\n            this._step()\r\n        }\r\n    }\r\n\r\n}"]}