{"version":3,"sources":["assets\\framework\\misc\\PoolSpawner.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import PoolManager from \"../core/PoolManager\";\r\nimport ccUtil from \"../utils/ccUtil\";\r\nlet { ccclass, property, menu } = cc._decorator\r\n@ccclass(\"Spawner\")\r\nexport class Spawner {\r\n    @property()\r\n    spawnerName: string = \"\";\r\n\r\n    @property({ type: cc.Node, visible() { return !this.usePrefab } })\r\n    template: cc.Node = null;\r\n\r\n    @property({ type: cc.Prefab, visible() { return this.usePrefab } })\r\n    prefab: cc.Prefab = null;\r\n\r\n    @property()\r\n    usePrefab: boolean = true;\r\n}\r\n\r\n@ccclass\r\n@menu(\"mimgame/PoolSpawner\")\r\nexport default class PoolSpawner extends cc.Component {\r\n    poolManager: PoolManager = null;\r\n    @property(cc.Node)\r\n    target: cc.Node = null;\r\n\r\n    @property\r\n    poolName: string = \"\"\r\n\r\n    @property([Spawner])\r\n    spawners: Spawner[] = []\r\n\r\n    dynamicPrefabs: { [index: string]: string } = {};\r\n\r\n    private dynamicPrefabs_loaded: { [index: string]: boolean } = {};\r\n\r\n    private _spawners: { [index: string]: Spawner } = {}\r\n\r\n    static _instances: { [index: string]: PoolSpawner } = {}\r\n\r\n\r\n    addSpawner(key, prefab: cc.Prefab) {\r\n        let spawner = this._spawners[key];\r\n        if (spawner == null) {\r\n            spawner = new Spawner();\r\n            spawner.usePrefab = true;\r\n            spawner.prefab = prefab;\r\n            this._spawners[key] = spawner;\r\n        }\r\n    }\r\n\r\n    hasSpawner(key) {\r\n        return this._spawners[key] != null;\r\n    }\r\n\r\n    onLoad() {\r\n        this.poolManager = new PoolManager(this.target || this.node, this.onCreateObject, this)\r\n        this.poolManager.name = this.poolName;\r\n        this.spawners.forEach(v => {\r\n            this._spawners[v.spawnerName] = v;\r\n        })\r\n    }\r\n\r\n    //mark first,later load \r\n    preload(key: string | number, path: string) {\r\n        this.dynamicPrefabs[key] = path;\r\n        this.dynamicPrefabs_loaded[key] = false;\r\n    }\r\n\r\n    //preload prefab \r\n    preloadPrefabs() {\r\n        let arr = []\r\n        for (let k in this.dynamicPrefabs) {\r\n            let v = this.dynamicPrefabs[k];\r\n            let loaded = this.dynamicPrefabs_loaded[k]\r\n            if (!loaded) {\r\n                let promise = ccUtil.getRes(v, cc.Prefab).then(v => {\r\n                    let spawner = new Spawner();\r\n                    spawner.usePrefab = true;\r\n                    spawner.prefab = v;\r\n                    this._spawners[k] = spawner;\r\n                    this.dynamicPrefabs_loaded[k] = true\r\n                })\r\n                arr.push(promise)\r\n            }\r\n        }\r\n        return Promise.all(arr);\r\n    }\r\n\r\n    onDestroy() {\r\n        this.poolManager.destroy();\r\n    }\r\n\r\n    onCreateObject(type) {\r\n        let cfg = this._spawners[type];\r\n        if (cfg == null) {\r\n            return console.error(\"Cannot get node from [\" + this.poolName + \"] pool by \" + type)\r\n        }\r\n        return cc.instantiate(cfg.usePrefab && cfg.prefab || cfg.template);\r\n    }\r\n\r\n    start() {\r\n        this.preloadPrefabs();\r\n    }\r\n}"]}