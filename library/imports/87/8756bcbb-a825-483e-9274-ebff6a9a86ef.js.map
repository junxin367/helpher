{"version":3,"sources":["assets\\framework\\misc\\SpriteFrameCache.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;IAAA;IA8EA,CAAC;IA1EG,sBAAW,4BAAQ;aAAnB;YAEI,IAAG,IAAI,CAAC,SAAS,IAAI,IAAI,EACzB;gBACI,IAAI,CAAC,SAAS,GAAG,IAAI,gBAAgB,EAAE,CAAC;aAC3C;YACD,OAAO,IAAI,CAAC,SAAS,CAAC;QAC1B,CAAC;;;OAAA;IAED,uDAAuD;IACjD,yCAAc,GAApB,UAAqB,GAAU;uCAAE,OAAO;;gBAEpC,+BAA+B;gBAC/B,oBAAoB;gBACpB,IAAI;gBACA,sBAAO,IAAI,OAAO,CAAiB,UAAC,OAAO,EAAC,MAAM;wBAC9C,yDAAyD;wBACzD,IAAG,CAAC,GAAG,IAAG,GAAG,IAAI,EAAE,EAAE;4BACjB,MAAM,CAAC,WAAW,CAAC,CAAA;4BACnB,OAAO;yBACV;wBACD,IAAK,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAC9B;4BACI,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAC,EAAE,CAAC,WAAW,EAAC,UAAC,KAAK,EAAC,KAAK;gCAC7C,IAAG,KAAK,EAAC;oCAAC,MAAM,CAAC,KAAK,CAAC,CAAC;oCAAA,OAAM;iCAAC;gCAC/B,IAAG,KAAK,EACR;oCACI,kCAAkC;oCAClC,OAAO,CAAC,KAAK,CAAC,CAAA;iCACjB;qCAAI;oCACD,MAAM,CAAC,WAAW,CAAC,CAAA;iCACtB;4BACL,CAAC,CAAC,CAAA;yBACL;6BAAI;4BACD,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,EAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAC,EAAE,UAAC,KAAK,EAAE,OAAO;gCACnD,IAAG,KAAK,EAAC;oCAAC,MAAM,CAAC,KAAK,CAAC,CAAC;oCAAA,OAAM;iCAAC;gCAC/B,IAAG,OAAO,EACV;oCACI,IAAI,KAAK,GAAG,IAAI,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;oCACxC,kCAAkC;oCAClC,OAAO,CAAC,KAAK,CAAC,CAAA;iCACjB;qCAAI;oCACD,MAAM,CAAC,WAAW,CAAC,CAAA;iCACtB;4BACL,CAAC,CAAC,CAAC;yBACN;oBACL,CAAC,CAAC,EAAA;;;KACL;IA2BT,uBAAC;AAAD,CA9EA,AA8EC,IAAA","file":"","sourceRoot":"/","sourcesContent":["export default class SpriteFrameCache\r\n{\r\n    static _instance:SpriteFrameCache;\r\n\r\n    static get instance()\r\n    {\r\n        if(this._instance == null)\r\n        {\r\n            this._instance = new SpriteFrameCache();\r\n        }\r\n        return this._instance;\r\n    }\r\n\r\n    // private frames:{[index:string]:cc.SpriteFrame} = {};\r\n    async getSpriteFrame(url:string):Promise<cc.SpriteFrame>\r\n    {\r\n        // let frame = this.frames[url]\r\n        // if(frame == null)\r\n        // {\r\n            return new Promise<cc.SpriteFrame>((resolve,reject)=>{\r\n                // console.log(\"[SpriteFrameCache] request image:\" + url)\r\n                if(!url ||url == \"\") {\r\n                    reject(\"empty-url\")\r\n                    return;\r\n                }\r\n                if ( url.indexOf(\"http\") == -1)\r\n                {\r\n                    cc.resources.load(url,cc.SpriteFrame,(error,frame)=>{\r\n                        if(error){reject(error);return}\r\n                        if(frame)\r\n                        {\r\n                            // this.addSpriteFrame(url ,frame)\r\n                            resolve(frame)\r\n                        }else{\r\n                            reject(\"frameNull\")\r\n                        }\r\n                    })\r\n                }else{\r\n                    cc.loader.load({url: url, type: 'png'}, (error, texture) =>{\r\n                        if(error){reject(error);return}\r\n                        if(texture)\r\n                        {\r\n                            var frame = new cc.SpriteFrame(texture);\r\n                            // this.addSpriteFrame(url ,frame)\r\n                            resolve(frame)\r\n                        }else{\r\n                            reject(\"frameNull\")\r\n                        }\r\n                    });\r\n                }\r\n            })\r\n        }\r\n        // return new Promise<cc.SpriteFrame>((resolve,reject)=>resolve(frame));\r\n        \r\n\r\n    // addSpriteFrame(url: string, frame: any): any {\r\n    //     this.frames[url] = frame;\r\n    //     return frame;\r\n    // }\r\n\r\n\r\n    // clear()\r\n    // {\r\n    //     for (var k in this.frames)\r\n    //     {\r\n    //         let frame =  this.frames[k]\r\n    //         cc.assetManager.releaseAsset(frame);\r\n    //         delete this.frames[k]\r\n    //     }\r\n    // }\r\n\r\n    // remove(k)\r\n    // {\r\n    //     let frame =  this.frames[k]\r\n    //     cc.assetManager.releaseAsset(frame);\r\n    //     delete this.frames[k]\r\n    // }\r\n\r\n}"]}