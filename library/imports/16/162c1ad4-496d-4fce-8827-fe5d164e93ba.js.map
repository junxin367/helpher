{"version":3,"sources":["assets\\framework\\extension\\shooter\\ShootManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import PoolManager from \"../../core/PoolManager\";\r\n\r\n\r\nconst { ccclass, property, menu } = cc._decorator;\r\n\r\nenum CanseeType {\r\n    SelfBounding,\r\n    Camera,\r\n}\r\n\r\n@ccclass\r\n@menu(\"shooter/ShootManager\")\r\nexport default class ShootManager extends cc.Component {\r\n\r\n    @property(cc.Camera)\r\n    camera: cc.Camera = null\r\n\r\n    @property(cc.Node)\r\n    player: cc.Node = null\r\n\r\n    static instance: ShootManager;\r\n    bulletPool: PoolManager;\r\n\r\n    halfSize: cc.Size = cc.size(0, 0);\r\n\r\n    prefabs = {}\r\n\r\n    @property({ type: cc.Enum(CanseeType) })\r\n    canseeType: CanseeType = CanseeType.SelfBounding;\r\n\r\n    // allBullets = []\r\n    allEnemies: cc.Node[] = []\r\n    allItems: cc.Node[] = []\r\n\r\n    onLoad() {\r\n        if (!this.camera)\r\n            this.camera = cc.Camera.main;\r\n\r\n        ShootManager.instance = this;\r\n        this.bulletPool = new PoolManager(this.node, this.onCreateObject, this)\r\n        this.bulletPool.name = \"ShootManager\"\r\n        g.setGlobalInstance(this);\r\n\r\n        this.halfSize.width = cc.visibleRect.width / 2;\r\n        this.halfSize.height = cc.visibleRect.height / 2;\r\n    }\r\n\r\n\r\n    onDestroy(){\r\n        this.bulletPool.destroy()\r\n    }\r\n\r\n    get bullets() {\r\n        return this.node.children;\r\n    }\r\n\r\n    //enemy node\r\n    removeEnemy(enemy: cc.Node) {\r\n        this.allEnemies.splice(this.allEnemies.indexOf(enemy), 1)\r\n    }\r\n\r\n    addEnemy(enemy: cc.Node) {\r\n        this.allEnemies.push(enemy);\r\n    }\r\n\r\n    addItem(item: cc.Node) {\r\n        this.allItems.push(item);\r\n    }\r\n\r\n    removeItem(item: cc.Node) {\r\n        this.allItems.splice(this.allItems.indexOf(item), 1)\r\n    }\r\n\r\n\r\n    onCreateObject(uuid) {\r\n        //type\r\n        let prefab = this.prefabs[uuid]\r\n        let node = cc.instantiate(prefab)\r\n        return node;\r\n    }\r\n\r\n    createBullet(bulletPrefab, worldpos) {\r\n        let node = this.get(bulletPrefab);\r\n        worldpos = this.node.convertToNodeSpaceAR(worldpos);\r\n        node.setPosition(worldpos);\r\n        return node;\r\n    }\r\n\r\n    get(prefab): cc.Node {\r\n        this.prefabs[prefab._uuid] = prefab\r\n        let bullet = this.bulletPool.get(prefab._uuid)\r\n        return bullet;\r\n    }\r\n\r\n    start() {\r\n\r\n    }\r\n\r\n    /** node 必须为shootmanager 的子节点 */\r\n    canSee(node: cc.Node) {\r\n        if (this.canseeType == CanseeType.SelfBounding) {\r\n            let rect = node.getBoundingBox();\r\n            let hw = this.node.width / 2;\r\n            let hh = this.node.height / 2;\r\n            if (rect.xMax < -hw || rect.xMin > hw || rect.yMax < -hh || rect.yMin > hh) {\r\n                //invisible \r\n                return false;\r\n            }\r\n            return true;\r\n        } else if (this.canseeType == CanseeType.Camera) {\r\n            return this.camera.canSee(node)\r\n        }\r\n        // return this.node.getBoundingBox().containsRect(this.node.getBoundingBox()) ||this.node.getBoundingBox().intersects(this.node.getBoundingBox())\r\n\r\n    }\r\n\r\n}\r\n"]}