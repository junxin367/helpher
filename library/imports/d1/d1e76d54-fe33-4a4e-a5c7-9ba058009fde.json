{
  "__type__": "cc.TextAsset",
  "_name": "qq.d",
  "_objFlags": 0,
  "_native": "",
  "text": "/**\r\n * Bricks Engine Official API\r\n */\r\ndeclare interface Map<T> {\r\n    [index: string]: T\r\n}\r\n\r\ndeclare interface GAMESTATUSINFO_DRESSINFO {\r\n    \"atlas\": string,\r\n    \"json\": string\r\n}\r\n\r\n\r\n\r\ndeclare interface GAMESTATUSINFO_DRESSINFO {\r\n    \"atlas\": string,\r\n    \"json\": string\r\n}\r\n\r\ndeclare interface GAMESTATUSINFO {\r\n    \"svrIp\": string,       //游戏推荐ip。开发者可忽略\r\n    \"gameVersion\": string, //游戏版本号\r\n    \"isMaster\": number,    //是否房主，1房主，0参加者\r\n    \"dressPath\": Array<GAMESTATUSINFO_DRESSINFO>,//厘米秀衣服路径\r\n    \"gameId\": number,      //游戏id\r\n    \"osVersion\": string,      //系统版本 \"10.3\"\r\n    \"networkType\": number,      //网络类型 1 电信 ，2 联通 ，3 移动  0: wifi或未知\r\n    \"roomId\": number,               //房间号\r\n    \"platform\": string,    //取值为 \"ios\"或\"android\"\r\n    \"openId\": string, //当前用户的标识\r\n    \"spriteDesignHeight\": number,//厘米秀小人spine动画的设计高度\r\n    \"QQVer\": string, //手机qq版本\r\n    \"isFirstPlay\": number,                 //是否第一次玩 1.第一次玩，0非第一次玩\r\n    \"skltPath\": GAMESTATUSINFO_DRESSINFO, //厘米秀小人spine骨骼\r\n    \"port\": number,  //推荐端口 开发者可忽略,\r\n    \"gameMode\": number,\r\n    \"aioType\": number,\r\n    \"avGameId\": number,\r\n    \"avAccountType\": number,\r\n    \"avRoomId\": number,\r\n    \"sessionId\"?: number,\r\n    \"devPlatform\"?: string, //仅在开发环境下可以，手q环境下无该字段\r\n    \"avAppId\"?: number,\r\n    \"src\": number,\r\n    \"commFlagBits\": number,\r\n    \"isWhiteUser\": number,\r\n    \"isFirstInstall\":number,  //是否首次安装    1为首次安装 0非首次安装\r\n}\r\n\r\n/**\r\n * 全局变量\r\n */\r\ndeclare var GameStatusInfo: GAMESTATUSINFO;\r\n\r\n\r\ninterface IFileSystemReadFileParam {\r\n    path: string,\r\n    encoding?: string\r\n}\r\n\r\n\r\ninterface IFileSystemRead {\r\n    file: Array<IFileSystemReadFileParam>,\r\n    success?: (obj: object) => void,\r\n    fail?: (obj: object) => void,\r\n    complete?: () => void\r\n}\r\n\r\n\r\ninterface IFileSystemWriteFileParam {\r\n    path: string,\r\n    encoding?: string,\r\n    data: BK.Buffer\r\n}\r\n\r\ninterface IFileSystemWriteOriginFileParam {\r\n    path: string,\r\n    encoding?: string,\r\n    data: ArrayBuffer\r\n}\r\n\r\ninterface IFileSystemWrite {\r\n    file: Array<IFileSystemWriteOriginFileParam>,\r\n    success?: (obj: object) => void,\r\n    fail?: (obj: object) => void,\r\n    complete?: () => void\r\n}\r\n\r\ninterface IFileSystemZipParam {\r\n    path: string,\r\n    zipPath: string\r\n}\r\n\r\ninterface IFileSystemZip {\r\n    file: Array<IFileSystemZipParam>,\r\n    success?: (obj: object) => void,\r\n    fail?: (obj: object) => void,\r\n    complete?: () => void\r\n}\r\n\r\ninterface IFileSystemUnzipParam {\r\n    path: string,\r\n    zipPath: string\r\n}\r\n\r\ninterface IFileSystemUnzip {\r\n    file: Array<IFileSystemUnzipParam>,\r\n    success?: (obj: object) => void,\r\n    fail?: (obj: object) => void,\r\n    complete?: () => void\r\n}\r\n\r\n\r\ninterface IImageLoadParam {\r\n    path: string,\r\n    format: number\r\n}\r\n\r\ninterface IImagesLoad {\r\n    file: Array<IImageLoadParam>,\r\n    success?: (obj: object) => void,\r\n    fail?: (obj: object) => void,\r\n    complete?: () => void\r\n}\r\n\r\ninterface IImageLoadImageWithBase64\r\n{\r\n    buffer:ArrayBuffer | BK.Buffer\r\n}\r\n\r\ninterface ISaveImage\r\n{\r\n    bitmap: ArrayBuffer, //位图数据\r\n    width: number, //宽\r\n    height: number,//高\r\n    path: string, //路径\r\n    ext: string, //后缀\r\n    isFlipY?: number //是否上下翻转\r\n}\r\n\r\ninterface ITextreLoadParam {\r\n    path: string,\r\n    format: number\r\n}\r\n\r\ninterface ITextureLoad {\r\n    file: Array<ITextreLoadParam>,\r\n    success?: (obj: object) => void,\r\n    fail?: (obj: object) => void,\r\n    complete?: () => void\r\n}\r\n\r\n\r\ninterface readDirParam {\r\n    path: string,\r\n    needDir?: boolean,\r\n    success?: (obj: object) => void,\r\n    fail?: (obj: object) => void,\r\n    complete?: () => void\r\n}\r\n\r\ninterface IReadDirInfo {\r\n    errMsg?: string,\r\n    files?: Array<string>\r\n}\r\n\r\ninterface FileInfo {\r\n    size: number,\r\n    atime: number,\r\n    mtime: number,\r\n    ctime: number\r\n}\r\n\r\n\r\n\r\n/**\r\n * 加载图片参数\r\n */\r\ninterface IImageLoad {\r\n    image: string | ArrayBuffer | BK.Buffer, \r\n    format?: number\r\n}\r\n\r\n\r\ndeclare class BKStorageEventLisener{\r\n    private storageEmitter:EventEmitter;\r\n    constructor();\r\n    /**\r\n     * \r\n     * 添加storage 监听回调\r\n     * \r\n     * @param name 监听事件 ‘storage’\r\n     * @param listener 监听回调\r\n     */\r\n\r\n    public addEventListener(name:string,listener:(...args: any[]) => void):void;\r\n    /**\r\n     * \r\n     * 移除storage 监听回调\r\n     * \r\n     * @param name 监听事件 ‘storage’\r\n     * @param listener 监听回调\r\n     */\r\n    public removeEventListener(name:string,listener:(...args: any[]) => void):void;\r\n\r\n    /**\r\n     * \r\n     * 分发storage事件\r\n     * \r\n     * @param name 事件名称 ‘storage’\r\n     * @param event 事件消息内容\r\n     */\r\n    public dispatchEvent(name:string,event:BKStorageEvent):void;\r\n}\r\n\r\ndeclare class BKStorage {\r\n\r\n    public length:number;\r\n\r\n    /**\r\n     * \r\n     * storage \r\n     * \r\n     * @param type storage 类型\r\n     */\r\n    constructor(type:StorageType);\r\n\r\n    /**\r\n     * \r\n     * 获取对应索引的key\r\n     * \r\n     * @param index 索引值\r\n     */\r\n    public key(index:number):string|null;\r\n\r\n    /**\r\n     * \r\n     * 获取key对应的value\r\n     * \r\n     * @param key 要获取的key\r\n     */\r\n    public getItem(key:string):string|null;\r\n\r\n    /**\r\n     * \r\n     * 设置key的value\r\n     * \r\n     * @param key 需要修改的key\r\n     * @param value 需要设置的value\r\n     */\r\n    public setItem(key:string,value:string):void;\r\n\r\n    /**\r\n     * \r\n     * 要移除的key\r\n     * \r\n     * @param key 要移除的key\r\n     */\r\n    public removeItem(key:string):void;\r\n\r\n    /**\r\n     * 清除当前storage 保存的数据 \r\n     */\r\n    public clear():void;\r\n\r\n    /**\r\n     * \r\n     * @param url 绑定当前storage 到url\r\n     */\r\n    private bindUrl(url:string):void;\r\n\r\n    [name:string]:any;\r\n}\r\n\r\n\r\ndeclare namespace BK {\r\n\r\n\r\n\r\n    let fileSystem: FileSystem;\r\n    let taskManager: TaskManager;\r\n    let storageEventListener : BKStorageEventLisener;  \r\n    let localStorage:BKStorage;\r\n    let sessionStorage:BKStorage;\r\n     function getStorageData(gameId:number):string;\r\n    function setStorageData(data:string,gameId:number):void;\r\n    interface SpriteNineInitParam{\r\n        texture:BK.Texture \r\n        textureWidth?:number\r\n        textureHeight?:number\r\n        grid?:Grid\r\n        offset?:BK.SpritePosition\r\n        rotated?:boolean\r\n    }\r\n\r\n    interface Grid{\r\n        top:number,\r\n        bottom:number,\r\n        left:number,\r\n        right:number\r\n    }\r\n\r\n    enum RepeatMode{\r\n        mirrorRepeat = 0,  //镜像重复\r\n        repeatToEdge = 1,  //重复至边缘\r\n        selfRepeat = 2  //重复整个图片\r\n    }\r\n\r\n    interface LoadSetParam{\r\n        jsonPath:string; //图集json文件路径\r\n        texturePath:string;  //图集png文件路径\r\n        format?:number  //资源格式  （可选，默认为RGBA8888）6代表RGBA8888,4代表RGBA4444\r\n        minFilter?:number //缩小采样方式  （可选，默认为1） 0最近采样 1线性采样\r\n        magFilter?:number //放大采样方式  （可选，默认为1）0最近采样 1线性采样\r\n        uWrap?:BK.RepeatMode //u轴重复方式    （可选，默认为1） 0镜像重复，1重复至边缘，2重复\r\n        vWrap?:BK.RepeatMode //v轴重复方式    （可选，默认为1） 0镜像重复，1重复至边缘，2重复\r\n    }\r\n\r\n    interface SpriteInfo{\r\n        filename:string\r\n        width:number\r\n        height:number\r\n    }\r\n\r\n    /**\r\n     * 九宫图\r\n     */\r\n    class SpriteNine{\r\n\r\n        constructor(initParam:SpriteNineInitParam)\r\n\r\n        /**\r\n         * 设置大小\r\n         * @param size \r\n         */\r\n        setSize(size:BK.SpriteSize):void\r\n\r\n        /**\r\n         * 设置位置\r\n         * @param position \r\n         */\r\n        setPosition(position:BK.SpritePosition):void\r\n    }\r\n\r\n    /**\r\n     * 图集\r\n     */\r\n    class SpriteSetCache{\r\n\r\n        /**\r\n         * 加载图集\r\n         * @param {LoadSetParam}param \r\n         */\r\n        static loadSet(param:LoadSetParam):void\r\n\r\n        /**\r\n         * 从图集中获取精灵\r\n         * @param {SpriteInfo} spriteInfo \r\n         */\r\n        static getSprite(spriteInfo:SpriteInfo):BK.Sprite|null \r\n\r\n        /**\r\n         * 根据图片路径移除图集\r\n         * @param {string} texturePath 文件路径\r\n         */\r\n        static removeSet(texturePath:string):void\r\n\r\n        /**\r\n         * 根据图集文件中小图的名称获取大图的纹理\r\n         * @param {string} filename 图集文件中小图的名称\r\n         */\r\n        static getTextureByFilename(filename:string):BK.Texture|null\r\n\r\n        /**\r\n         * 根据图集文件中小图名称，获取小图的位置信息\r\n         * @param {string} filename 图集文件中小图的名字\r\n         */\r\n        static getFrameInfoByFilename(filename:string):SheetFrameInfo|null;\r\n\r\n        /**\r\n         * 根据图集文件中小图名称，获取小图的位置信息和大图的纹理对象\r\n         * @param {string} filename 图集文件中小图的名字\r\n         */\r\n        static getTextureInfoByFilename(filename:string):TextureInfo|null;\r\n\r\n        /**\r\n         * 根据图集文件中小图名称，获取大图纹理路径名称\r\n         * @param {string} filename 图集文件中小图的名字\r\n         */\r\n        static getTexturePathByFilename(filename:string) : string|null\r\n\r\n        /**\r\n         * 根据图集文件中小图名称，创建一个图集精灵对象\r\n         * @param {SpriteInfo} spriteInfo 创建图集所需参数\r\n         */\r\n        static createSpriteSet(spriteInfo:SpriteInfo):BK.SpriteSet|null\r\n\r\n    }\r\n\r\n    interface SpriteSetInitParam{\r\n        textureInfo:BK.TextureInfo;\r\n        width?:number;\r\n        height?:number;\r\n        flipU?:number;\r\n        flipV?:number;\r\n        stretchX?:number;\r\n        stretchY?:number;\r\n    }\r\n\r\n    class SpriteSet extends Sprite{\r\n        constructor(initParam:BK.SpriteSetInitParam)\r\n    }\r\n\r\n    interface SheetRect{\r\n        x:number,\r\n        y:number,\r\n        width:number,\r\n        height:number\r\n    }\r\n\r\n    interface SheetSize{\r\n        width:number,height:number\r\n    }\r\n\r\n    interface SheetPoint{\r\n        x:number,y:number\r\n    }\r\n\r\n    interface SheetFrameInfo{\r\n        filename:string,\r\n        frame: SheetRect,\r\n        rotated: boolean,\r\n        trimmed: boolean,\r\n        spriteSourceSize: SheetRect,\r\n        sourceSize: SheetSize,\r\n    }\r\n\r\n    interface TextureInfo\r\n    {\r\n        texturePath:string,\r\n        frameInfo:SheetFrameInfo,\r\n        texture:BK.Texture|null\r\n    }\r\n\r\n    //AnimationSprite\r\n    interface AnimationSpriteInfo{\r\n        animationSprite:BK.AnimationSprite;\r\n        count: number;\r\n    }\r\n\r\n    interface Anchor{\r\n        x:number,\r\n        y:number\r\n    }\r\n\r\n    interface SpritePosition{\r\n        x:number,\r\n        y:number\r\n    }\r\n\r\n    interface SpriteSize{\r\n        width:number,\r\n        height:number\r\n    }\r\n\r\n    interface AnimationSpritePlayParam{\r\n        beginFrameIndex:number,\r\n        repeatCount:number;\r\n    }\r\n\r\n    interface AnimationSpriteStopParam{\r\n        frameIndex:number\r\n    }\r\n\r\n    /**\r\n     * 帧动画\r\n     */\r\n    class AnimationSprite extends BK.Sprite{\r\n\r\n        constructor(sheetTextureInfoArray:Array<BK.TextureInfo>)\r\n\r\n        /**\r\n         * 播放帧动画\r\n         * @param {BK.AnimationSpritePlayParam} param \r\n         */\r\n        play(param?:BK.AnimationSpritePlayParam):void\r\n\r\n\r\n        /**\r\n         * 停止帧动画 \r\n         * @param {number} frameIndex 停止后要显示的帧序号  默认为当前帧\r\n         */\r\n        stop(frameIndex?:number):void\r\n\r\n        /**\r\n         * 设置显示的位置 默认{x:0, y:0}\r\n         * @param {BK.SpritePosition} position \r\n         */\r\n        setPosition(position:BK.SpritePosition):void\r\n\r\n        /**\r\n         * 设置显示的大小\r\n         * @param {BK.SpriteSize} size \r\n         */\r\n        setSize(size:BK.SpriteSize):void\r\n\r\n        /**\r\n         * 锚点  默认{x:0,y:0}\r\n         * 默认为图片左下角\r\n         * @param anchor \r\n         */\r\n        setAnchor(anchor:BK.Anchor):void\r\n\r\n        /**\r\n         * 设置帧动画 每一帧的时长，单位为秒  默认为1/30\r\n         * @param {number} duration 每帧时长 单位：秒\r\n         */\r\n        setFrameDuration(duration:number):void\r\n\r\n        /**\r\n         * 暂停帧动画 可以通过resume()恢复\r\n         */\r\n        pause():void\r\n\r\n        /**\r\n         * 继续帧动画\r\n         */\r\n        resume():void\r\n\r\n        /**\r\n         * 每播放完成一次时回调\r\n         * @param completeCallback \r\n         */\r\n        setCompleteCallback(completeCallback:(info:BK.AnimationSpriteInfo)=>void):void\r\n\r\n        /**\r\n         * 全部播放完成时回调\r\n         * @param endCallback \r\n         */\r\n        setEndCallback(endCallback:(info:BK.AnimationSpriteInfo)=>void):void\r\n    }\r\n\r\n\r\n    export const enum  QQGetUserInfoMask{\r\n        nick=1,\r\n        head= 2\r\n    }\r\n    export interface QQUserInfoHeadBufferInfo\r\n    {\r\n        buffer:BK.Buffer;\r\n        width:number;\r\n        height:number;\r\n    }\r\n    export interface QQUserInfo{\r\n        openId:string;\r\n        nick:string;\r\n        headInfo:QQUserInfoHeadBufferInfo;\r\n    }\r\n   \r\n    //手Q相关\r\n    export class QQ {\r\n        static getRankListWithoutRoom(attr: string, order: number, rankType: number, arg3: (errCode: any, cmd: any, data: any) => void);\r\n        static uploadScoreWithoutRoom(arg0: number, data: { userData: { openId: string; startMs: string; endMs: string; scoreInfo: { score: any; }; }[]; attr: { score: { type: string; order: number; }; }; }, arg2: (errCode: any, cmd: any, data: any) => void);\r\n        static skipGame(gameId: any, arg1: string);\r\n        static loadGameData(arg0: (errCode: any, cmd: any, data: any) => void);\r\n        \r\n        static saveGameData(data: any, arg1: (errCode: any, cmd: any, data: any) => void);\r\n        static createShortCut(extendInfo: string);\r\n\r\n        /**\r\n         * 批量获取头像、昵称\r\n         * @param mask \r\n         * @param openIdList \r\n         * @param callback \r\n         */\r\n        static getUserInfo(mask:BK.QQGetUserInfoMask,openIdList:Array<string>,callback:(errCode:number,userInfos:Array<BK.QQUserInfo>)=>void);\r\n       \r\n        /**\r\n         * 通知手q,用户点击了缩小按钮\r\n         * \r\n         * @static\r\n         * @memberof QQ\r\n         */\r\n        static notifyHideGame();\r\n\r\n        /**\r\n         * 通知手q,用户点击了关闭按钮\r\n         * \r\n         * @static\r\n         * @memberof QQ\r\n         */\r\n        static notifyCloseGame();\r\n\r\n        /**\r\n         * 通知手q,游戏即将开始\r\n         * \r\n         * @static\r\n         * @memberof QQ\r\n         */\r\n        static notifyReadyGame();\r\n\r\n        /**\r\n         * 通知手q,等待玩家加入\r\n         * \r\n         * @static\r\n         * @memberof QQ\r\n         */\r\n        static notifyGameTipsWaiting();\r\n\r\n        /**\r\n         * 通知手q,新玩家加入房间\r\n         * @param nick 昵称\r\n         * @memberof QQ\r\n         */\r\n        static notifyGameTipsSomeOneJoinRoom(nick: string);\r\n\r\n        /**\r\n         * 通知手q,游戏进行中\r\n         * \r\n         * @static\r\n         * @memberof QQ\r\n         */\r\n        static notifyGameTipsPlaying();\r\n\r\n        /**\r\n         * 通知手q,游戏已结束\r\n         * \r\n         * @static\r\n         * @memberof QQ\r\n         */\r\n        static notifyGameTipsGameOver()\r\n\r\n        /**\r\n         * 邀请好友加入游戏。支持手q/微信\r\n         * \r\n         * @static\r\n         * @param {string} wording 文案\r\n         */\r\n        static inviteFriend(wording: string);\r\n\r\n        /**\r\n         * 查询是否关注公众号\r\n         * \r\n         * @static\r\n         * @param {any} puin \r\n         * @param {any} callback \r\n         * @memberof QQ\r\n         */\r\n        static checkPubAccountState(puin: string, callback: (errorCode: number, cmd: string, data: object) => void);\r\n\r\n        /**\r\n         * 进入公众号资料卡\r\n         * \r\n         * @static\r\n         * @param {any} puin \r\n         * @memberof QQ\r\n         */\r\n        static enterPubAccountCard(puin: string): void;\r\n\r\n        /**\r\n         * \r\n         * @param callback \r\n         */\r\n        static addSSOJoinRoomCallBack(callback: (err: number, cmd: string, data: any) => void): void;\r\n\r\n        static notifyJoinRoom(newJoinPlayers: Array<any>, data: any, errCode: number);\r\n\r\n        static notifyNewRoom(roomId: number, ret: number): void;\r\n\r\n        static ssoJoinRoomCallback(errCode: number, cmd: string, data: any);\r\n\r\n        static notifyStartGameSrv();\r\n\r\n        /**\r\n         * \r\n         * @param newJoinPlayers \r\n         * @param roomid \r\n         * @param isCreator  1为创建者\r\n         */\r\n        static notifyNewOrJoinRoomSrv(newJoinPlayers: Array<any>, roomid: number, isCreator: number);\r\n\r\n        /**\r\n         * 释放需要告知sso服务器\r\n         */\r\n        static isNeedSSOServer: boolean;\r\n\r\n        /**\r\n         * 自动发送加入房间消息\r\n         */\r\n        static isAutoSendJoinRoomNotify: boolean;\r\n\r\n        /**\r\n         * 房间容量\r\n         */\r\n        static roomVol: number;\r\n\r\n        /**\r\n         * 设置ark\r\n         * @param wording \r\n         */\r\n        static setArkData(wording: string): void;\r\n\r\n        /**\r\n         * 数据上报玩一玩统一报表\r\n         * \r\n         * @static\r\n         * @param {string} action \r\n         * @param {string} enter \r\n         * @param {string} result \r\n         * @param {string} param1 \r\n         * @param {string} param2 \r\n         * @param {any} param3 \r\n         * @memberof QQ\r\n         */\r\n        static uploadData(action:string, enter:string, result:string, param1:string, param2:string, param3)\r\n\r\n        /**\r\n         * 游戏内主动分享\r\n         * \r\n         * @static\r\n         * @param {ShareReturnInfo} shareInfo 分享的数据\r\n         * @param {(retCode:number,shareType:BK.ShareDest,isFirstShare:boolean)=>void} callback 回调\r\n         * @memberof QQ\r\n         */\r\n        static share(shareInfo:ShareReturnInfo,callback:(retCode:number,shareDest:BK.ShareDest,isFirstShare:boolean)=>void);\r\n\r\n        static shareToArk(roomId, summary, picUrl, isSelectFriend, extendInfo, callback?:any): void;\r\n    \r\n        static queryCloudSignature(callback): void;\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n     * 保持屏幕常亮所需参数\r\n     */\r\n    interface KeepScreenOnParam {\r\n        isKeepOn: boolean  //true为保持常亮  false为取消常亮\r\n    }\r\n\r\n    class Device {\r\n\r\n        /**\r\n         * 保持屏幕常亮\r\n         * @param {KeepScreenOnParam} param \r\n         */\r\n        static keepScreenOn(param: KeepScreenOnParam): void;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * 二维码生成成功回调\r\n     */\r\n    interface SuccessResult {\r\n        path: string;\r\n    }\r\n\r\n    /**\r\n     * 二维码生成失败回调\r\n     */\r\n    interface FailResult {\r\n        msg: string;\r\n    }\r\n\r\n    /**\r\n     * 二维码颜色参数\r\n     */\r\n    interface RGBA {\r\n        r: number;\r\n        g: number;\r\n        b: number;\r\n        a: number;\r\n    }\r\n    /**\r\n     * 二维码纠错等级\r\n     */\r\n    enum QRErrorCorrectLevel {\r\n        L = 1,\r\n        M = 0,\r\n        Q = 3,\r\n        H = 2\r\n    }\r\n\r\n    /**\r\n     * 二维码生成所需配置\r\n     */\r\n    interface QRCodeConfig {\r\n        width?: number;//默认值 256\r\n        height?: number; //默认值 256\r\n        colorDark?: RGBA; //默认值 {r:0.0,g:0.0,b:0.0,a:1.0}\r\n        colorLight?: RGBA;//默认值 {r:1.0,g:1.0,b:1.0,a:1.0}\r\n        correctLevel?: QRErrorCorrectLevel; //默认值 2\r\n    }\r\n\r\n    /**\r\n     * 异步生成二维码所需参数\r\n     */\r\n    interface QRCodeParam {\r\n        path: string;  //图片生成位置  只能在GameSandBox://目录及其子目录\r\n        content: string;  //二维码内容\r\n        config?: QRCodeConfig;  //二维码生成所需参数\r\n        success: (succObj: SuccessResult) => void;\r\n        fail: (err: Error) => void;\r\n        complete?: () => void;\r\n    }\r\n\r\n    /**\r\n     * 同步生成二维码所需参数\r\n     */\r\n    interface QRCodeSyncParam {\r\n        path: string;  //图片生成位置  只能在GameSandBox://目录及其子目录\r\n        content: string;  //二维码内容\r\n        config?: QRCodeConfig;  //二维码生成所需参数\r\n    }\r\n\r\n    class QRCode {\r\n        /**\r\n         * 生成二维码图片到指定位置  同步\r\n         * @param {QRCodeSyncParam} param\r\n         */\r\n        static makeQRCodeToFileSync(param: QRCodeSyncParam): void;\r\n\r\n        /**\r\n         * 生成二维码图片到指定位置  异步\r\n         * @param {QRCodeParam} param\r\n         */\r\n        static makeQRCodeToFile(param: QRCodeParam): void;\r\n    }\r\n\r\n\r\n    interface Error {\r\n        msg: string;\r\n    }\r\n\r\n    /**\r\n     * 加密失败结果\r\n     */\r\n    interface CryptError {\r\n        msg: string;\r\n    }\r\n\r\n    /**\r\n     * 加密成功结果\r\n     */\r\n    interface CryptResult {\r\n        data: string;\r\n    }\r\n\r\n    interface CryptCommonParam {\r\n        success: (succObj: CryptResult) => void;\r\n        fail: (failObj: CryptError) => void;\r\n        complete?: () => void;\r\n    }\r\n\r\n    /**\r\n     * MD5加密参数\r\n     */\r\n    interface CryptParam extends CryptCommonParam {\r\n        data: string;\r\n    }\r\n\r\n    /**\r\n     * HAMC-MD5加密参数\r\n     */\r\n    interface HMACParam extends CryptCommonParam {\r\n        key: string;\r\n        data: string;\r\n    }\r\n\r\n    interface CryptSyncParam {\r\n        data: string | Array<number>;\r\n    }\r\n\r\n    interface HMACSyncParam {\r\n        key: string | Array<number>;\r\n        data: string | Array<number>;\r\n    }\r\n\r\n    class Crypt {\r\n\r\n        /**\r\n         * 对data进行md5加密  结果以小写十六进制串形式回调\r\n         * @param {CryptParam} param data必须为字符串\r\n         */\r\n        static md5ToHex(param: CryptParam): void\r\n\r\n        /**\r\n         * 对data进行md5加密 并将加密后的结果进行Base64转化\r\n         * @param {CryptParam} param data必须为字符串\r\n         */\r\n        static md5ToBase64(param: CryptParam): void\r\n\r\n        /**\r\n         * 通过key对data进行HMAC-MD5加密， 结果以小写十六进制串形式回调\r\n         * @param {HMACParam} param data和key必须为字符串\r\n         */\r\n        static hmacMd5ToHex(param: HMACParam): void\r\n\r\n        /**\r\n         * 通过key对data进行HMAC-MD5加密，并将结果进行Base64转化\r\n         * @param {HMACParam} param data和key必须为字符串\r\n         */\r\n        static hmacMd5ToBase64(param: HMACParam): void\r\n\r\n        /**\r\n         * 将data进行sha1加密 并将结果以小写十六进制串回调\r\n         * @param {CryptParam} param data必须为字符串\r\n         */\r\n        static sha1ToHex(param: CryptParam): void\r\n        /**\r\n         * 将data进行sha1加密 并将结果进行Base64转化\r\n         * @param {CryptParam} param data必须为字符串\r\n         */\r\n        static sha1ToBase64(param: CryptParam): void\r\n\r\n        /**\r\n         * 使用key对data进行Hmac-sha1加密 并将结果以小写十六进制串回调\r\n         * @param {HMACParam} param data和key必须为字符串\r\n         */\r\n        static hmacSha1ToHex(param: HMACParam): void\r\n\r\n        /**\r\n         * 使用key对data进行Hmac-sha1加密 并将结果进行Base64转化\r\n         * @param {HMACParam} param data和key必须为字符串\r\n         */\r\n        static hmacSha1ToBase64(param: HMACParam): void\r\n\r\n        /**\r\n         * 对data进行md5加密  结果以小写十六进制串形式返回  同步方法\r\n         * @param {CryptSyncParam} param\r\n         */\r\n        static md5ToHexSync(param: CryptSyncParam): string\r\n\r\n        /**\r\n         * 对data进行md5加密 并将加密后的结果进行Base64转化  同步方法\r\n         * @param {CryptSyncParam} param\r\n         */\r\n        static md5ToBase64Sync(param: CryptSyncParam): string\r\n\r\n\r\n        /**\r\n         * 通过key对data进行HMAC-MD5加密， 结果以小写十六进制串形式返回  同步方法\r\n         * @param {HMACSyncParam} param\r\n         */\r\n        static hmacMd5ToHexSync(param: HMACSyncParam): string\r\n\r\n        /**\r\n         * 通过key对data进行HMAC-MD5加密，并将结果进行Base64转化  同步方法\r\n         * @param {HMACSyncParam} param\r\n         */\r\n        static hmacMd5ToBase64Sync(param: HMACSyncParam): string\r\n\r\n\r\n        /**\r\n         * 将data进行sha1加密 并将结果以小写十六进制串返回  同步方法\r\n         * @param {CryptSyncParam} param\r\n         */\r\n        static sha1ToHexSync(param: CryptSyncParam): string\r\n        /**\r\n         * 将data进行sha1加密 并将结果进行Base64转化  同步方法\r\n         * @param {CryptSyncParam} param\r\n         */\r\n        static sha1ToBase64Sync(param: CryptSyncParam): string\r\n\r\n        /**\r\n     * 使用key对data进行Hmac-sha1加密 并将结果以小写十六进制串返回  同步方法\r\n     * @param {HMACSyncParam} param\r\n     */\r\n        static hmacSha1ToHexSync(param: HMACSyncParam): string\r\n\r\n\r\n        /**\r\n         * 使用key对data进行Hmac-sha1加密 并将结果进行Base64转化 同步方法\r\n         * @param {HMACSyncParam} param\r\n         */\r\n        static hmacSha1ToBase64Sync(param: HMACSyncParam): string\r\n\r\n\r\n    }\r\n\r\n    export namespace MQQ {\r\n\r\n        export class Webview {\r\n            /**\r\n             * 打开一个webview\r\n             * \r\n             * @static\r\n             * @param {string} url \r\n             * \r\n             * @memberof Webview\r\n             */\r\n            static open(url: string): void;\r\n\r\n            /**\r\n             * 监听已打开webview的消息\r\n             * @param callback \r\n             */\r\n            static onMessageHandle(callback:(cmd:string, data:any)=>void);\r\n\r\n            /**\r\n             * 打开透明webview\r\n             * @param url \r\n             * @param gameOrientation \r\n             */\r\n            static openTransparent(url:string, gameOrientation:number);\r\n        }\r\n\r\n        export class SsoRequest {\r\n            /**\r\n             * 发送SSO消息\r\n             * \r\n             * @static\r\n             * @param {object} obj 请求的数据\r\n             * @param {string} cmd 命令字\r\n             * \r\n             * @memberof SsoRequest\r\n             */\r\n            static send(obj: object, cmd: string);\r\n\r\n             /**\r\n             * H5 与终端通信\r\n             * \r\n             * @static\r\n             * @param {object} obj 请求的数据\r\n             * @param {string} cmd 命令字\r\n             * \r\n             * @memberof SsoRequest\r\n             */\r\n            static sendTo(obj: object, cmd: string);\r\n\r\n            /**\r\n             * H5 与终端通信\r\n             * \r\n             * @static\r\n             * @param {object} obj 请求的数据\r\n             * @param {string} cmd 命令字\r\n             * \r\n             * @memberof SsoRequest\r\n             */\r\n            static sendSSO(obj: object, cmd: string);\r\n\r\n\r\n\r\n            /**\r\n             * 添加某个对象监听某个命令\r\n             *\r\n             * @static\r\n             * @param cmd  命令字\r\n             * @param target 绑定的对象\r\n             * @param callback 回调函数\r\n             */\r\n            static addListener(cmd: string, target: Object, callback: (errCode: number, cmd: string, data: any) => void);\r\n\r\n            /**\r\n             * 移除某个对象对某个命令的事件监听\r\n             * \r\n             * @static\r\n             * @param {string} cmd 命令字\r\n             * @param {Object} targer 待解除绑定的对象\r\n             * \r\n             * @memberof SsoRequest\r\n             */\r\n            static removeListener(cmd: string, targer: Object);\r\n\r\n            static listenerInfos:Array<any>;\r\n\r\n            /**\r\n             * 终端->js回调\r\n             * \r\n             * @memberof SsoRequest\r\n             */\r\n            static callback(errCode:number,cmd:string,data:any);\r\n\r\n            //\r\n\r\n        }\r\n\r\n        export class Account {\r\n            /**\r\n             * 获取头像信息\r\n             * \r\n             * @static\r\n             * @param {string} openId \r\n             * @param {(openId:string,BuffInfo:HeadBufferInfo)=>void} callback \r\n             * \r\n             * @memberof Account\r\n             */\r\n            static getHead(openId: string, callback: (openId: string, BuffInfo: HeadBufferInfo) => void)\r\n\r\n            /**\r\n             * 获取昵称\r\n             * \r\n             * @static\r\n             * @param {string} openId \r\n             * @param {(openId:string,nick:string)=>void} callback \r\n             * \r\n             * @memberof Account\r\n             */\r\n            static getNick(openId: string, callback: (openId: string, nick: string) => void)\r\n\r\n            static getHeadEx(openId: string, callback: (openId: string, imgUrl: string) => void);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 分享回调参数\r\n     */\r\n    interface ShareResult {\r\n        retCode: number,\r\n        shareDest: number,\r\n        isFirstShare: boolean\r\n    }\r\n\r\n    /**\r\n     * 网络状态\r\n     */\r\n    enum NetworkState {\r\n        'NoneToMobileNetwork' = 1,\r\n        'NoneToWifi' = 2,\r\n        'MobileNetworkToWifi' = 3,\r\n        'MobileNetworkToNone' = 4,\r\n        'WifiToNone' = 5,\r\n        'WifiToMobileNetwork' = 6,\r\n    }\r\n\r\n    /**\r\n     * 网络状态回调参数\r\n     */\r\n    interface NetworkChangeResult {\r\n        state: NetworkState;\r\n    }\r\n\r\n    /**\r\n     * 监听游戏退到后台的事件\r\n     * 用户按home键将手Q退至后台\r\n     * @param callback 监听函数\r\n     */\r\n    export function onEnterBackground(callback: () => void): void;\r\n\r\n    /**\r\n     * 取消监听游戏退到后台的事件\r\n     * @param callback 待取消的监听函数\r\n     */\r\n    export function offEnterBackground(callback: () => void): void;\r\n\r\n    /**\r\n     * 监听游戏回到前台的事件\r\n     * 手Q进程从后台回到前台\r\n     * @param callback 监听函数\r\n     */\r\n    export function onEnterForeground(callback: () => void): void;\r\n\r\n    /**\r\n     * 取消监听游戏回到前台的事件\r\n     * @param callback 待取消的监听函数\r\n     */\r\n    export function offEnterForeground(callback: () => void): void;\r\n\r\n    /**\r\n     * 监听游戏关闭事件\r\n     * 开发者需处理销毁动作：上报用户成绩\r\n     * @param callback 监听函数\r\n     */\r\n    export function onGameClose(callback: () => void): void;\r\n\r\n    /**\r\n     * 取消监听游戏关闭事件\r\n     * @param callback 待取消的监听函数\r\n     */\r\n    export function offGameClose(callback: () => void): void;\r\n\r\n    /**\r\n     * 监听分享事件\r\n     * @param callback 监听函数\r\n     */\r\n    export function onGameShare(callback: () => void): void;\r\n\r\n    /**\r\n     * 取消监听分享事件\r\n     * @param callback 待取消的监听函数\r\n     */\r\n    export function offGameShare(callback: () => void): void;\r\n\r\n    /**\r\n     * 监听分享完成事件\r\n     * 不代表分享成功，可能是分享失败或取消分享了，需判断retCode字段\r\n     * @param callback 监听函数\r\n     */\r\n    export function onGameShareComplete(callback: (res: ShareResult) => void): void;\r\n\r\n    /**\r\n     * 取消监听分享完成事件\r\n     * @param callback 待取消的监听函数\r\n     */\r\n    export function offGameShareComplete(callback: (res: ShareResult) => void): void;\r\n\r\n    /**\r\n     * 监听网络变化事件\r\n     * @param callback 监听函数\r\n     */\r\n    export function onNetworkChange(callback: (res: NetworkChangeResult) => void): void;\r\n\r\n    /**\r\n     * 取消监听网络变化事件\r\n     * @param callback 待取消的监听函数\r\n     */\r\n    export function offNetworkChange(callback: (res: NetworkChangeResult) => void): void;\r\n\r\n    /**\r\n     * 监听最大化事件\r\n     * @param callback 监听函数\r\n     */\r\n    export function onMaximize(callback: () => void): void;\r\n\r\n    /**\r\n     * 取消监听最大化事件\r\n     * @param callback 待取消的监听函数\r\n     */\r\n    export function offMaximize(callback: () => void): void;\r\n\r\n    /**\r\n     * 监听最小化事件  用户点击\"收起游戏\"\r\n     * @param callback 监听函数\r\n     */\r\n    export function onMinimize(callback: () => void): void;\r\n\r\n    /**\r\n     * 取消监听最小化事件\r\n     * @param callback 待取消的监听函数\r\n     */\r\n    export function offMinimize(callback: () => void): void;\r\n\r\n    export class EmitData {\r\n        event: string;\r\n        once: boolean;\r\n        listener: (...args: any[]) => void;\r\n        constructor(event: string, listener: (...args: any[]) => void, once: boolean);\r\n    }\r\n    export class EventEmitter {\r\n        private _emits;\r\n        constructor();\r\n        private __emit_get;\r\n        private __emit_exists;\r\n        private __emit_put;\r\n        private __emit_remove;\r\n        /**\r\n         * 添加 listener 函数到名为 eventName 的事件的监听器数组的末尾。\r\n         * 注意:多次调用并传入相同的 eventName 和 listener 会导致 listener 被添加与调用多次。\r\n         * @param event\r\n         * @param listener\r\n         */\r\n        on(eventName: string, listener: (...args: any[]) => void): this;\r\n        /**\r\n         * 添加一个单次 listener 函数到名为 eventName 的事件\r\n         * @param eventName\r\n         * @param listener\r\n         */\r\n        once(eventName: string, listener: (...args: any[]) => void): this;\r\n        /**\r\n         * 从名为 eventName 的事件的监听器数组中移除指定的 listener。\r\n         * @param eventName\r\n         * @param listener\r\n         */\r\n        off(eventName: string, listener: (...args: any[]) => void): this;\r\n        /**\r\n         * 同步地调用每个注册到名为 eventName 事件的监听\r\n         * 如果事件有监听器，则返回 true ，否则返回 false\r\n         * @param eventName\r\n         * @param args\r\n         */\r\n        emit(eventName: string, ...args: any[]): boolean;\r\n    }\r\n\r\n\r\n    export class Script {\r\n\r\n        /**\r\n         * \r\n         */\r\n        static getTouchModeAll: number;\r\n\r\n        /**\r\n         * 渲染模式\r\n         */\r\n        static renderMode: number;\r\n\r\n        /**\r\n         * 输出log\r\n         * @static\r\n         * @param {number} level \r\n         * @param {number} errCode \r\n         * @param {string} info \r\n         * \r\n         * @memberof Script\r\n         */\r\n        static log(level: number, errCode: number, info: string): void;\r\n\r\n        /**\r\n         * 执行其他js脚本文件\r\n         * \r\n         * @static\r\n         * @param {string} scriptPath \r\n         * \r\n         * @memberof Script\r\n         */\r\n        static loadlib(scriptPath: string): void;\r\n\r\n        /**\r\n         * 设置堆栈错误回调\r\n         * @param callback \r\n         */\r\n        static setErrorObserver(callback: (message: string, stacktrace: string) => void): void;\r\n\r\n        /**\r\n         * 分包加载\r\n         * @param scriptPath \r\n         */\r\n        static innerLoadLib(scriptPath: string): void;\r\n    }\r\n\r\n    /**\r\n     * 控制台打印接口\r\n     */\r\n    export class Console {\r\n\r\n        /**\r\n         * release版本输出信息\r\n         * @param msg 信息\r\n         */\r\n        static log(...msg: any[]): void;\r\n\r\n        /**\r\n         * debug版本输出信息\r\n         * @param msg 信息\r\n         */\r\n        static debug(...msg: any[]): void;\r\n\r\n        /**\r\n         * release版本输出错误信息\r\n         * @param msg 错误信息\r\n         */\r\n        static error(...msg: any[]): void;\r\n\r\n        /**\r\n         * 开始计时\r\n         * @param label 标签，用于辨识计时器\r\n         */\r\n        static time(label: string): void;\r\n\r\n        /**\r\n         * 结束计时，并打印经过的时间\r\n         * @param label 标签，用于辨识计时器\r\n         */\r\n        static timeEnd(label: string): void;\r\n    }\r\n\r\n    /**\r\n     *  广告系统\r\n     */\r\n    namespace Advertisement {\r\n        /**\r\n         * banner组件样式\r\n         */\r\n        interface BannerStyle {\r\n            x: number;\r\n            y: number;\r\n            width?: number;\r\n            height?: number;\r\n        }\r\n        /**\r\n         * banner类型\r\n         */\r\n        const enum BannerViewId {\r\n            STATIC = 1001,\r\n            DYNAMIC = 1002,\r\n            SDK = 1003\r\n        }\r\n        /**\r\n         * banner组件创建参数\r\n         */\r\n        interface BannerParam {\r\n            viewId?: BannerViewId;\r\n            style?: BannerStyle;\r\n        }\r\n        const enum BannerErrorCode {\r\n            Node = 0,\r\n            InterNal = 1,\r\n            Frequency = 2,\r\n            Network = 3,\r\n            InvalidRequest = 4,\r\n            NoFill = 5,\r\n            Server = 6,\r\n            FormatMisMatch = 7\r\n        }\r\n        interface AdError {\r\n            msg: string;\r\n            code: BannerErrorCode | number;\r\n        }\r\n        class BannerAd extends EmitterEvent {\r\n            bannerId: number;\r\n            param: BannerParam;\r\n            isLoadSucc: boolean;\r\n            ssoCMD: any;\r\n            useNative: boolean;\r\n            needAutoShow: boolean;\r\n            _innerGameBanner: BK.AdBannerHandler | undefined;\r\n            static _bannerId(): any;\r\n            /**\r\n             * 构造函数\r\n             * @param param\r\n             */\r\n            constructor(param: BannerParam);\r\n            /**\r\n             * 展示\r\n             */\r\n            show(): void;\r\n            /**\r\n             * 隐藏\r\n             */\r\n            hide(): void;\r\n            /**\r\n             * 销毁\r\n             */\r\n            destory(): void;\r\n            /**\r\n             * 监听拉取失败事件\r\n             *\r\n             * @param func\r\n             */\r\n            onError(func: (err: AdError) => void): void;\r\n            /**\r\n             * 移除拉取失败事件\r\n             * @param func\r\n             */\r\n            offError(func: (err: AdError) => void): void;\r\n            /**\r\n             * 监听加载成功回调\r\n             *\r\n             * @param func\r\n             */\r\n            onLoad(func: () => void): void;\r\n            /**\r\n             * 取消监听加载成功回调\r\n             * @param func\r\n             */\r\n            offLoad(func: () => void): void;\r\n            private fetch;\r\n            private _sendSso;\r\n            private _ssoLoad;\r\n            private _ssoShow;\r\n            private _ssoClose;\r\n            private _ssoHide;\r\n        }\r\n        /**\r\n         * 创建banner 广告组件\r\n         * @param param 参数\r\n         */\r\n        function createBannerAd(param: BannerParam): BannerAd;\r\n        class VideoAd extends EmitterEvent {\r\n            handle: BK.AdVideoHandler | undefined;\r\n            autoShow: boolean;\r\n            constructor();\r\n            /**\r\n             * 展示\r\n             */\r\n            show(): void;\r\n            /**\r\n             * 监听视频开始播放事件\r\n             * @param callback\r\n             */\r\n            onPlayStart(callback: () => void): void;\r\n            /**\r\n             * 取消视频开始播放事件\r\n             * @param callback\r\n             */\r\n            offPlayStart(callback: () => void): void;\r\n            /**\r\n             * 监听视频结束播放事件\r\n             * @param callback\r\n             */\r\n            onPlayFinish(callback: () => void): void;\r\n            /**\r\n             * 取消视频结束播放事件\r\n             * @param callback\r\n             */\r\n            offPlayFinish(callback: () => void): void;\r\n            /**\r\n             * 监听加载成功事件\r\n             * @param callback\r\n             */\r\n            onLoad(callback: () => void): void;\r\n            /**\r\n             * 取消加载成功事件\r\n             * @param callback\r\n             */\r\n            offLoad(callback: (...args: any[]) => void): void;\r\n            /**\r\n             * 监听错误事件回调\r\n             * @param callback\r\n             */\r\n            onError(callback: (err: AdError) => void): void;\r\n            /**\r\n             * 取消监听错误\r\n             * @param callback\r\n             */\r\n            offError(callback: (...args: any[]) => void): void;\r\n            /**\r\n             * 监听关闭\r\n             * @param callback\r\n             */\r\n            onClose(callback: (...args: any[]) => void): void;\r\n            /**\r\n             * 取消监听关闭\r\n             * @param callback\r\n             */\r\n            offClose(callback: (...args: any[]) => void): void;\r\n        }\r\n        function createVideoAd(): VideoAd;\r\n    }\r\n\r\n    namespace UI {\r\n\r\n        /**\r\n         * 失败回调的参数\r\n         */\r\n        export interface Error {\r\n            msg: string;\r\n        }\r\n\r\n        /**\r\n         * 公共回调参数\r\n         */\r\n        export interface CommonParam {\r\n            complete?: () => void;\r\n        }\r\n\r\n        /**\r\n         * 显示键盘  参数\r\n         */\r\n        export interface ShowKeyboardParam extends CommonParam {\r\n            defaultText?: string;\r\n        }\r\n\r\n        /**\r\n         * 更新键盘  参数\r\n         */\r\n        export interface UpdateKeyboardParam extends CommonParam {\r\n            text: string;\r\n        }\r\n\r\n        /**\r\n         * 监听回调  参数\r\n         */\r\n        export interface KeyboardData {\r\n            text: string;\r\n        }\r\n\r\n\r\n        /**\r\n         * 监听键盘输入事件\r\n         * @param inputListener 监听事件的回调函数\r\n         */\r\n        export function onKeyboardInput(inputListener: (data: KeyboardData) => void): void;\r\n\r\n        /**\r\n         * 取消监听键盘输入事件\r\n         * @param inputListener 监听事件回调函数\r\n         */\r\n        export function offKeyboardInput(inputListener: (data: KeyboardData) => void): void;\r\n\r\n        /**\r\n         * 监听用户点击确认按钮时的事件\r\n         * @param confirmListener 监听事件的回调函数\r\n         */\r\n        export function onKeyboardConfirm(confirmListener: (data: KeyboardData) => void): void;\r\n\r\n        /**\r\n         * 取消监听用户点击确认按钮时的事件\r\n         * @param confirmListener 监听事件的回调函数\r\n         */\r\n        export function offKeyboardConfirm(confirmListener: (data: KeyboardData) => void): void;\r\n\r\n        /**\r\n         * 显示输入键盘\r\n         * @param {ShowKeyboardParam} param 显示键盘所需的参数\r\n         */\r\n        export function showKeyboard(param?: ShowKeyboardParam): void;\r\n\r\n        /**\r\n         * 收起键盘\r\n         * @param {CommonParam} param 收起键盘所需的参数\r\n         */\r\n        export function hideKeyboard(param: CommonParam): void;\r\n\r\n        /**\r\n         * 更新输入框的文字\r\n         * @param {UpdateKeyboardParam} param 更新键盘所需的参数\r\n         */\r\n        export function updateKeyboard(param: UpdateKeyboardParam): void;\r\n\r\n        /**\r\n         * 展示 toast 组件，默认 2000 毫秒之后消失\r\n         * @param object 展示 toast 所需要参数\r\n         */\r\n        export function showToast(object:any): void;\r\n\r\n        /**\r\n         * 隐藏 toast 组件\r\n         * @param object 隐藏 toast 所需要参数\r\n         */\r\n        export function hideToast(object:any): void;\r\n\r\n\r\n        /**\r\n         * 展示 loading 组件 \r\n         * @param object 展示 loading 所需要参数\r\n         */\r\n        export function showLoading(object:any): void;\r\n\r\n        /**\r\n         * 隐藏 loading 组件\r\n         * @param object 隐藏 loading 所需要参数\r\n         */\r\n        export function hideLoading(object:any): void;\r\n\r\n\r\n        /**\r\n         * 展示 alert 组件\r\n         * @param object 展示 alert 所需要参数\r\n         */\r\n        export function showAlert(object:any): void;\r\n    }\r\n\r\n    /**\r\n     * 音频相关参数\r\n     */\r\n    export namespace Audio {\r\n        /**\r\n         * 回调结果\r\n         */\r\n        interface Result {\r\n            code?: number\r\n            cmd?: string\r\n            data?: Result\r\n        }\r\n        interface AudioPara {\r\n            src?: string\r\n            type?: string\r\n            id?: number\r\n            loop?: boolean\r\n            autoPlay?: boolean\r\n            volume?: number\r\n            muted?: boolean\r\n            duration?: number\r\n            currentTime?: number\r\n            leftVolume?: number\r\n            rightVolume?: number\r\n            complete?: Function\r\n            loopCount?: number\r\n            event?: number\r\n            paused?: boolean\r\n            data?: AudioPara\r\n            auto?: boolean\r\n            audo?: boolean\r\n            message?: string\r\n            code?: number\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 老的音频接口\r\n     */\r\n    export class Audio {\r\n\r\n        /**\r\n         *\r\n         * @param type  声音类型 0表示背景音乐，1表示特效音乐\r\n         * @param musicPath 音乐路径 以GameRes://为前缀\r\n         * @param loopCount 重复次数 -1为循环播放\r\n         */\r\n        constructor(type: number, musicPath: string, loopCount: number);\r\n\r\n        //播放\r\n        startMusic(cb: () => void): void;\r\n\r\n        //暂停\r\n        pauseMusic(): void;\r\n\r\n        //继续播放\r\n        resumeMusic(): void;\r\n\r\n        //停止播放\r\n        stopMusic(): void;\r\n\r\n        /**\r\n         * 开关\r\n         */\r\n        static switch: boolean;\r\n\r\n    }\r\n    /**\r\n     * 音频管理类\r\n     * \r\n     */\r\n    export class AudioManager {\r\n        /**\r\n         * 暂停所有音频\r\n         */\r\n        static pauseAllAudio(): void;\r\n        /**\r\n         * 恢复所有音频\r\n         */\r\n        static resumeAllAudio(): void;\r\n        /**\r\n         * 销毁所有音频\r\n         */\r\n        static destroyAllAudio(): void;\r\n    }\r\n\r\n    /**\r\n     * 音频新接口\r\n     */\r\n    export class AudioElement extends EventEmitter {\r\n        currentTime: number;\r\n        duration: number;\r\n        /**\r\n         * 是否在load完成之后自动播放\r\n         */\r\n        autoplay: boolean;\r\n        paused: boolean;\r\n        /**\r\n         * 音量 0到1浮点数\r\n         */\r\n        volume: number;\r\n        muted: boolean;\r\n        src: string;\r\n        loop: boolean;\r\n        pause(): void;\r\n        /**\r\n         *\r\n         * @param {BK.Audio.AudioPara} para\r\n         * {complete:Function} 播放结束的回调，用于获取effect播放的音频id\r\n         */\r\n        play(para?: BK.Audio.AudioPara): void;\r\n\r\n        /**\r\n         * 销毁音频对象释放资源\r\n         */\r\n        destroy(): void;\r\n        seek(time: number): void;\r\n        load(): void;\r\n\r\n        /**\r\n         * 支持的音频格式，目前只支持mp3\r\n         * @param {string} type\r\n         */\r\n        canPlayType(type: string): void;\r\n\r\n\r\n        /**\r\n         * effect 接口 恢复音乐\r\n         * id 播放的音频id\r\n         */\r\n        resume(id?: number): void;\r\n\r\n        /**\r\n         * effect 接口 停止音乐\r\n         * id 播放的音频id\r\n         */\r\n        stop(id?: number): void;\r\n    }\r\n\r\n    /**\r\n     * 音频被中断\r\n     * @returns {void}\r\n     */\r\n    export function onAudioInterruptionStart(callback: Function): void;\r\n\r\n    /**\r\n     * 音频中断取消\r\n     * @returns {void}\r\n     */\r\n    export function onAudioInterruptionEnd(callback: Function): void;\r\n\r\n    /**\r\n     * 创建音频对象，新的音频对象\r\n     * @param para\r\n     * @returns {AudioElement}\r\n     */\r\n    export function createAudioContext(para?: any): AudioElement;\r\n\r\n    export namespace Http {\r\n\r\n        export interface HttpRequestOptions {\r\n            /** 请求URL, 必填 */\r\n            url: string;\r\n            /** 请求方法, 默认GET */\r\n            method?: string;\r\n            /** 请求头 */\r\n            headers?: Map<string>;\r\n            /** 请求体 */\r\n            body?: string | ArrayBuffer;\r\n            /**\r\n             * 请求成功回调, 成功仅代表HTTP请求完成, 不等同于请求成功200\r\n             * @param succObj\r\n             */\r\n            success?: (succObj: SuccessObject) => void;\r\n            /**\r\n             * 请求失败回调, 如连接超时等网络错误\r\n             * @param errObj\r\n             */\r\n            fail?: (errObj: ErrorObject) => void;\r\n            /**\r\n             * 请求结束回调, 无论请求成功失败都会调用\r\n             */\r\n            complete?: () => void;\r\n            /**\r\n             * 上传进度\r\n             * @param curr     当前进度\r\n             * @param total    总进度\r\n             */\r\n            uploadProgress?: (curr: number, total: number) => void;\r\n            /**\r\n             * 下载进度\r\n             * @param curr     当前进度\r\n             * @param total    总进度, 响应头无Content-Length时为-1\r\n             */\r\n            downloadProgress?: (curr: number, total: number) => void;\r\n        }\r\n\r\n        export interface SuccessObject {\r\n            /** 响应码 */\r\n            statusCode: number;\r\n            /**\r\n             * 响应头\r\n             * QQ 7.8.0以下 headers为{}\r\n             */\r\n            headers: Map<string>;\r\n\r\n            /**\r\n             * 以字符串形式读取响应体, 请求发生错误时返回空字符串''\r\n             * 没有缓存, 每次调用都会重新读取返回新对象, 不会返回前一次读取的对象\r\n             */\r\n            text(): string;\r\n\r\n            /**\r\n             * 以JSON对象形式读取响应体, 已经经过JSON.parse解析, 请求发生错误或响应体为空时返回null\r\n             * 没有缓存, 每次调用都会重新读取返回新对象, 不会返回前一次读取的对象\r\n             */\r\n            jsonObject<T = any>(): T;\r\n\r\n            /**\r\n             * 以ArrayBuffer形式读取响应体, 请求发生错误时返回大小为0的ArrayBuffer\r\n             * 没有缓存, 每次调用都会重新读取返回新对象, 不会返回前一次读取的对象\r\n             */\r\n            arrayBuffer(): ArrayBuffer;\r\n        }\r\n\r\n        export interface ErrorObject {\r\n            /** 错误原因, 用于调试, 不适合直接展示给用户 */\r\n            msg: string;\r\n        }\r\n\r\n        /**\r\n         * 发起HTTP请求\r\n         * @param options HTTP请求参数 包括url, method, headers, body和回调函数\r\n         */\r\n        export function request(options: HttpRequestOptions): void;\r\n    }\r\n\r\n    export interface SsoRequestOptions {\r\n        reqCmd: string,                 // 请求命令字，必选\r\n        respCmd?: string,               // 响应命令字，可选，默认同reqCmd\r\n        data?: any,                     // 请求数据包，可选\r\n        isListener?: boolean            // 是否监听，可选，默认为true\r\n        success?: (succObj: {\r\n            code: number,\r\n            cmd: string,\r\n            data: any,\r\n        }) => void\r\n        fail?: (failObj: {\r\n            code: number,\r\n            cmd: string,\r\n            data: any,\r\n        }) => void\r\n        complete?: () => void\r\n    }\r\n\r\n    export class SsoRequest extends EmitterEvent {\r\n\r\n        /**\r\n         * sso请求\r\n         * @param options sso请求参数\r\n         */\r\n        static request(options: SsoRequestOptions): SsoRequest;\r\n    }\r\n\r\n    /**\r\n     * 分享接口\r\n     */\r\n    export namespace Share {\r\n\r\n        export interface ShareOptions {\r\n            title?: string,         // 分享标题，可选，默认为'轻游戏'\r\n            summary?: string,       // 分享内容，可选，默认为'一起来玩游戏吧~'\r\n            extendInfo?: string,    // 扩展信息，可选，默认为‘’\r\n            qqImgUrl: string,       // 分享到QQ的图片网络链接，必选，仅支持网络链接\r\n            socialPicPath?: string, // 分享到空间、微信、朋友圈的图片本地路径，可选，默认为游戏二维码，仅支持本地路径\r\n            msgUrl?: string,        // 详情页的网络链接，分享链接必选\r\n            isToFriend?: boolean,   // 是否发送给好友，可选\r\n            range?: {               // 截图范围\r\n                x: number,          // 横坐标\r\n                y: number,          // 纵坐标\r\n                width: number,      // 宽\r\n                height: number,     // 高\r\n            },\r\n            success?: (succObj: {\r\n                code: number,\r\n                data: any,\r\n            }) => void,\r\n            fail?: (failObj: {\r\n                code: number,\r\n                msg: string,\r\n            }) => void,\r\n            complete?: () => void,\r\n        }\r\n\r\n        /**\r\n         * 基础分享接口\r\n         * @param options 截图参数，imgUrl必选，且必须是网络链接\r\n         */\r\n        export function share(options: ShareOptions): void;\r\n\r\n        /**\r\n         * 分享H5链接\r\n         * @param options 截图参数，imgUrl必选，且必须是网络链接\r\n         */\r\n        export function shareLink(options: ShareOptions): void;\r\n    }\r\n\r\n    export class Ticker {\r\n\r\n        /**\r\n         * 每调用60次所需的秒时\r\n         * 1代表 1秒调用60次。2代表2秒内调用60 。即1代表60帧/秒 2代表 30帧/秒\r\n         * @type {number}\r\n         * @memberof Ticker\r\n         */\r\n        interval: number;\r\n\r\n\r\n        /**\r\n         * 暂停\r\n         * true代表暂停，flase代表运行\r\n         *\r\n         * @type {boolean}\r\n         * @memberof Ticker\r\n         */\r\n        paused: boolean;\r\n\r\n        /**\r\n         * Creates an instance of Ticker.\r\n         *\r\n         * @memberof Ticker\r\n         */\r\n        constructor();\r\n        /**\r\n         * 销毁函数\r\n         *\r\n         *\r\n         * @memberof Ticker\r\n         */\r\n        dispose(): void;\r\n\r\n\r\n        /**\r\n         * 设置定时回调函数\r\n         *\r\n         * @param {(ts:number,duration:number)=>void} callback\r\n         *\r\n         * @memberof Ticker\r\n         */\r\n        setTickerCallBack(callback: (ts: number, duration: number) => void): void;\r\n    }\r\n\r\n    /**\r\n     * 代码实现在brick.js\r\n     */\r\n    export class MainTicker extends Ticker {\r\n        /**\r\n         * 添加定时回调函数\r\n         *\r\n         * @param {(ts:number, duration:number,obj?:any)=>void} callback\r\n         * @param {*} [obj]\r\n         * @memberof MainTicker\r\n         */\r\n        add(callback: (ts: number, duration: number, obj?: any) => void, obj?: any): void;\r\n\r\n        /**\r\n         * 移除绑定\r\n         *\r\n         * @param {*} [obj]\r\n         * @memberof MainTicker\r\n         */\r\n        remove(obj?: any): void;\r\n\r\n        /**\r\n         *\r\n         * @param func 回调函数\r\n         * @param millsecond 等候时间，单位为毫秒\r\n         * @param obj （选填）绑定对象\r\n         */\r\n        setTimeout(func: (ts: number, dt: number, object: any) => void, millsecond: number, obj?: any): void;\r\n\r\n        /**\r\n         * 移除绑定对象对应的回调函数\r\n         *\r\n         * @param {*} obj\r\n         */\r\n        removeTimeout(obj: any): void;\r\n    }\r\n    export class Director {\r\n        /**\r\n         * 屏幕比例\r\n         */\r\n        static screenScale: number;\r\n\r\n        /**\r\n         * 屏幕逻辑大小\r\n         */\r\n        static renderSize: Size;\r\n\r\n        /**\r\n         * 屏幕实际像素大小\r\n         */\r\n        static screenPixelSize: Size;\r\n\r\n        /**\r\n         * 根节点\r\n         */\r\n        static root: Node;\r\n\r\n        /**\r\n         * 帧率\r\n         */\r\n        static fps: number;\r\n\r\n        /**\r\n         * 全局定时器\r\n         */\r\n        static ticker: BK.MainTicker;\r\n\r\n        /**\r\n         * 是否保持屏幕常量\r\n         */\r\n        static isKeepScreenOn: boolean\r\n\r\n        static setQAVDelegate(delegate: any): void;\r\n\r\n        /**\r\n         * 附着一个物理引擎中的space至全局环境中\r\n         *\r\n         * @param {BK.Physics.Space} attachSpace\r\n         *\r\n         * @memberof Director\r\n         */\r\n        attachSpace(attachSpace: BK.Physics.Space): void;\r\n\r\n\r\n        //android特有方法\r\n        static tickerPause(): void;\r\n        //android特有方法\r\n        static tickerResume(): void;\r\n\r\n        static queryDeviceInfo(): void\r\n\r\n    }\r\n\r\n    class FileSystem {\r\n        /**\r\n         * \r\n         * 批量异步读取文件\r\n         * \r\n         * @param object 读文件参数接口\r\n         */\r\n        public readFile(object: IFileSystemRead): void;\r\n\r\n        /**\r\n         * \r\n         * 批量异步写文件\r\n         * \r\n         * @param object 写文件参数接口\r\n         */\r\n        public writeFile(object: IFileSystemWrite): void;\r\n\r\n        /**\r\n         * \r\n         * 批量异步压缩文件\r\n         * \r\n         * @param object 压缩文件参数接口\r\n         */\r\n        public zip(object: IFileSystemZip): void;\r\n\r\n        /**\r\n         * \r\n         * 批量异步解压文件\r\n         * \r\n         * @param object 解压文件接口\r\n         */\r\n        public unzip(object: IFileSystemZip): void;\r\n\r\n        /**\r\n         * \r\n         * 同步读取文件\r\n         * \r\n         * @param filePath 文件路径\r\n         */\r\n        public readFileSync(filePath: string): ArrayBuffer;\r\n\r\n        /**\r\n         * \r\n         * 同步写文件\r\n         * \r\n         * @param filePath 文件路径\r\n         * @param data 文件内容\r\n         */\r\n        public writeFileSync(filePath: string, data: ArrayBuffer | string): void;\r\n\r\n        /**\r\n         * \r\n         * 同步压缩文件\r\n         * \r\n         * @param srcPath 待压缩路径\r\n         * @param targetZip 压缩包路径\r\n         */\r\n        public zipSync(srcPath: string, targetZip: string): void;\r\n\r\n        /**\r\n         * \r\n         * 同步解压文件\r\n         * \r\n         * @param srcZip 待解压包路径\r\n         * @param targetPath 解压路径\r\n         */\r\n        public unzipSync(srcZip: string, targetPath: string): void;\r\n\r\n        /**\r\n         * \r\n         * 创建目录\r\n         * \r\n         * @param dirPath 目录路径\r\n         */\r\n        public makeDirSync(dirPath: string): void;\r\n\r\n        /**\r\n         * \r\n         * 删除文件\r\n         * \r\n         * @param filePath 文件路径\r\n         */\r\n        public unlinkSync(filePath: string): void;\r\n\r\n        /**\r\n         * \r\n         * 拷贝文件\r\n         * \r\n         * @param srcPath 源文件路径\r\n         * @param destPath 目标文件路径\r\n         */\r\n        public copyFileSync(srcPath: string, destPath: string): void;\r\n\r\n        /**\r\n         * \r\n         * 文件是否存在\r\n         * \r\n         * @param path 文件路径\r\n         */\r\n        public accessSync(path: string): boolean;\r\n\r\n        /**\r\n         * \r\n         * 路径是否是目录\r\n         * \r\n         * @param path 文件或目录路径\r\n         */\r\n        public isDirectory(path: string): boolean;\r\n\r\n        /**\r\n         * \r\n         * 获取文件信息\r\n         * \r\n         * @param file 文件路径\r\n         */\r\n        public getFileInfoSync(file: string): FileInfo;\r\n\r\n        /**\r\n         * \r\n         * 读取目录\r\n         * \r\n         * @param object 读文件接口参数\r\n         */\r\n        public readDir(object: readDirParam): void;\r\n    }\r\n\r\n\r\n    class Image {\r\n\r\n        buffer: BK.Buffer;\r\n        format?: number;\r\n        width: number;\r\n        height: number;\r\n\r\n        /**\r\n         * \r\n         * @param config 加载图片参数接口\r\n         */\r\n        static loadImages(config: IImagesLoad): void;\r\n\r\n        /**\r\n         * \r\n         * @param buffer 将要加载的已经过base64编码的数据\r\n         */\r\n        static loadImageWithBase64(object:IImageLoadImageWithBase64 | ArrayBuffer | BK.Buffer):BK.Image|null;\r\n\r\n        /**\r\n        * 加载图片\r\n        */\r\n        static loadImage(object:IImageLoad|ArrayBuffer|BK.Buffer| any,format?:number): BK.Image;\r\n\r\n        /**\r\n         * 保存图片\r\n         * @param bitmap \r\n         * @param width \r\n         * @param height \r\n         * @param path \r\n         * @param ext \r\n         * @param isFlipY \r\n         */\r\n        static saveImage(object:ISaveImage|BK.Buffer|ArrayBuffer,\r\n            width: number, //宽\r\n            height: number,//高\r\n            path: string, //路径\r\n            ext: string, //后缀\r\n            isFlipY?: number ): void;\r\n\r\n\r\n\r\n        /**\r\n         * info 异步加载图片列表 \r\n         */\r\n        static loadImageAsync(info:Array<any>):number;\r\n\r\n        /**\r\n         * \r\n         * 释放image 数据\r\n         * \r\n         * @param buffer 需要释放的image数据\r\n         */\r\n        static dispose(buffer:BK.Buffer):void;\r\n\r\n    }\r\n\r\n    export interface FailInfo {\r\n        code: FailCode                    // 状态码\r\n        msg: string                     // 命令字\r\n    }\r\n\r\n    const enum FailCode {\r\n        DEV_NO_SUPPORT = -1,  //开发工程下不支持分包\r\n        QQ_NO_SUPPORT = -2,   //QQ版本不支持\r\n        CONFIG_ERROR = -3,    //gameConfig.json配置无分包相应字段\r\n        LOAD_FAILD = -4       //加载子包失败\r\n    }\r\n\r\n    interface LoadSubPackageParam {\r\n        name: string, //子包名\r\n        success?: () => void,\r\n        fail?: (info: FailInfo) => void,\r\n        complete?: () => void,\r\n    }\r\n\r\n    interface LoadSubPackageParam {\r\n        name: string, //子包名\r\n        success?: () => void,\r\n        fail?: (info: FailInfo) => void,\r\n        complete?: () => void,\r\n    }\r\n\r\n    export class SubPackageTask {\r\n        constructor(packName: string)\r\n        onProgressUpdate(callback: (progress: number) => void): void\r\n    }\r\n\r\n    /**\r\n     * 分包加载\r\n     * @param param \r\n     */\r\n    export function loadSubpackage(param: LoadSubPackageParam): SubPackageTask;\r\n\r\n    /**\r\n     * 是否H5游戏\r\n     */\r\n    var isBrowser:boolean;\r\n\r\n\r\n    interface SystemInfo {\r\n        gameVersion: string,    //游戏版本号\r\n        isMaster: number,       //是否房主，1房主，0参加者\r\n        roomId: number,         //房间号\r\n        gameId: number,         //游戏id\r\n        osVersion: string,      //系统版本 10.3\r\n        networkType: number,    //网络类型 1 电信 ，2 联通 ，3 移动  0: wifi或未知\r\n        platform: string,       //取值为 ios或android\r\n        openId: string,         //当前用户的标识\r\n        QQVer: string,          //手机qq版本\r\n        isFirstInstall:number,  //是否首次安装    1为首次安装 0非首次安装\r\n        aioType:number,         //当前聊天窗类型    1.双人聊天 4.群 5.讨论组\r\n        src: number,            //游戏启动入口    100:实时PK，200:聊天窗游戏消息\r\n        isWhiteUser: number,    //是否为白名单用户，1是，0否\r\n        gameType:number,        //游戏类型    (手Q7.6.5及以上支持) 0: 普通游戏 1：红包游戏\r\n        model:string,           //具体机型    (手Q7.6.3及以上支持) 形如 \"PRO 6 Plus\"\r\n        sex:number ,            //性别    1 男 2 女\r\n        devPlatform?: string,   //仅在开发环境下可以，手q环境下无该字段\r\n    }\r\n    /**\r\n     * 获取系统信息\r\n     */\r\n    function getSystemInfoSync() : SystemInfo;\r\n\r\n\r\n    interface InnerViewOption \r\n    {\r\n        orientation?:number, //1（默认，竖屏）2.横屏（home键在左边）3.横屏 （home键在右边）\r\n        openId?:string, //默认是自己\r\n        transparent?: boolean,     //是否透明\r\n        url:string\r\n    }\r\n}"
}